{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"scale-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"scale(0.9)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"scale(1)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"scale-in\": \"scale-in 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3300},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase, cleanDemoData } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Clean any existing demo XP data and seed with clean data\n  await cleanDemoData();\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2237},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { openaiService } from \"./services/openai\";\nimport { insertMaterialSchema, insertDeckSchema, insertFlashcardSchema, insertStudySessionSchema, insertSettingsSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Schema for XP addition\nconst addXpSchema = z.object({\n  xpDelta: z.number().min(0).max(10000) // Reasonable XP limits\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Helper function to get demo user ID\n  const getDemoUserId = async (): Promise<string | null> => {\n    const demoUser = await storage.getUserByEmail('demo@example.com');\n    return demoUser?.id || null;\n  };\n\n  // Materials\n  app.get(\"/api/materials\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const materials = await storage.getMaterialsByUserId(demoUserId);\n      res.json(materials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch materials\" });\n    }\n  });\n\n  app.get(\"/api/materials/:id\", async (req, res) => {\n    try {\n      const material = await storage.getMaterial(req.params.id);\n      if (!material) {\n        return res.status(404).json({ error: \"Material not found\" });\n      }\n      res.json(material);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch material\" });\n    }\n  });\n\n  app.post(\"/api/materials\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const validatedData = insertMaterialSchema.parse({\n        ...req.body,\n        userId: demoUserId\n      });\n      const material = await storage.createMaterial(validatedData);\n      res.json(material);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid material data\" });\n    }\n  });\n\n  // AI Processing\n  app.post(\"/api/ai/summary\", async (req, res) => {\n    try {\n      const { text, apiKey } = req.body;\n      \n      if (apiKey) {\n        openaiService.setApiKey(apiKey);\n      }\n\n      if (!openaiService.isConfigured()) {\n        return res.status(400).json({ error: \"OpenAI API kulcs nincs beállítva\" });\n      }\n\n      const summary = await openaiService.generateSummary(text);\n      res.json({ summary });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Hiba történt az összefoglaló készítése során\" });\n    }\n  });\n\n  app.post(\"/api/ai/flashcards\", async (req, res) => {\n    try {\n      const { text, apiKey } = req.body;\n      \n      if (apiKey) {\n        openaiService.setApiKey(apiKey);\n      }\n\n      if (!openaiService.isConfigured()) {\n        return res.status(400).json({ error: \"OpenAI API kulcs nincs beállítva\" });\n      }\n\n      const cards = await openaiService.generateFlashcards(text);\n      res.json({ cards });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Hiba történt a kártyák generálása során\" });\n    }\n  });\n\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message, context, history, apiKey } = req.body;\n      \n      if (apiKey) {\n        openaiService.setApiKey(apiKey);\n      }\n\n      if (!openaiService.isConfigured()) {\n        return res.status(400).json({ error: \"OpenAI API kulcs nincs beállítva\" });\n      }\n\n      let response;\n      if (context) {\n        response = await openaiService.chatWithContext(message, context, history || []);\n      } else {\n        response = await openaiService.chatGlobal(message, history || []);\n      }\n      \n      res.json({ response });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Hiba történt a chat során\" });\n    }\n  });\n\n  app.post(\"/api/ai/test\", async (req, res) => {\n    try {\n      const { apiKey } = req.body;\n      \n      if (apiKey) {\n        openaiService.setApiKey(apiKey);\n      }\n\n      const isWorking = await openaiService.testConnection();\n      res.json({ success: isWorking });\n    } catch (error) {\n      res.json({ success: false });\n    }\n  });\n\n  // Decks\n  app.get(\"/api/decks\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const decks = await storage.getDecksByUserId(demoUserId);\n      res.json(decks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch decks\" });\n    }\n  });\n\n  app.get(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const deck = await storage.getDeck(req.params.id);\n      if (!deck) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n      res.json(deck);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch deck\" });\n    }\n  });\n\n  app.post(\"/api/decks\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const validatedData = insertDeckSchema.parse({\n        ...req.body,\n        userId: demoUserId\n      });\n      const deck = await storage.createDeck(validatedData);\n      res.json(deck);\n    } catch (error) {\n      console.error('Deck creation error:', error);\n      res.status(400).json({ error: \"Invalid deck data\", details: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.put(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const updated = await storage.updateDeck(req.params.id, req.body);\n      if (!updated) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n      res.json(updated);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update deck\" });\n    }\n  });\n\n  app.delete(\"/api/decks/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteDeck(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Deck not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete deck\" });\n    }\n  });\n\n  app.get(\"/api/decks/:id/cards\", async (req, res) => {\n    try {\n      const cards = await storage.getFlashcardsByDeckId(req.params.id);\n      res.json(cards);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cards\" });\n    }\n  });\n\n  app.get(\"/api/decks/:id/review\", async (req, res) => {\n    try {\n      const cards = await storage.getFlashcardsForReviewByDeck(req.params.id);\n      res.json(cards);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch cards for review\" });\n    }\n  });\n\n  // Flashcards\n  app.get(\"/api/flashcards\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const flashcards = await storage.getFlashcardsByUserId(demoUserId);\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch flashcards\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/review\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const flashcards = await storage.getFlashcardsForReview(demoUserId);\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch flashcards for review\" });\n    }\n  });\n\n  app.post(\"/api/flashcards\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const validatedData = insertFlashcardSchema.parse({\n        ...req.body,\n        userId: demoUserId\n      });\n      const flashcard = await storage.createFlashcard(validatedData);\n      res.json(flashcard);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid flashcard data\" });\n    }\n  });\n\n  app.patch(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const flashcard = await storage.updateFlashcard(req.params.id, req.body);\n      if (!flashcard) {\n        return res.status(404).json({ error: \"Flashcard not found\" });\n      }\n      res.json(flashcard);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update flashcard\" });\n    }\n  });\n\n  app.put(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const flashcard = await storage.updateFlashcard(req.params.id, req.body);\n      if (!flashcard) {\n        return res.status(404).json({ error: \"Flashcard not found\" });\n      }\n      res.json(flashcard);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update flashcard\" });\n    }\n  });\n\n  app.delete(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteFlashcard(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Flashcard not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete flashcard\" });\n    }\n  });\n\n  // Study Sessions\n  app.get(\"/api/study-sessions\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const sessions = await storage.getStudySessionsByUserId(demoUserId);\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch study sessions\" });\n    }\n  });\n\n  app.post(\"/api/study-sessions\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const validatedData = insertStudySessionSchema.parse({\n        ...req.body,\n        userId: demoUserId\n      });\n      const session = await storage.createStudySession(validatedData);\n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid study session data\" });\n    }\n  });\n\n  // Settings\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const settings = await storage.getSettings(demoUserId);\n      if (!settings) {\n        return res.status(404).json({ error: \"Settings not found\" });\n      }\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", async (req, res) => {\n    try {\n      const demoUserId = await getDemoUserId();\n      if (!demoUserId) {\n        return res.status(404).json({ error: \"Demo user not found\" });\n      }\n      const validatedData = insertSettingsSchema.parse({\n        ...req.body,\n        userId: demoUserId\n      });\n      const settings = await storage.createOrUpdateSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error('Settings save error:', error);\n      res.status(400).json({ error: \"Invalid settings data\", details: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // User data (for progress tracking)\n  app.get(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUserByEmail('demo@example.com');\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  app.patch(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUserByEmail('demo@example.com');\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const updatedUser = await storage.updateUser(user.id, req.body);\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Add XP endpoint (POST /api/user/add-xp) - for atomic XP increments\n  app.post(\"/api/user/add-xp\", async (req, res) => {\n    try {\n      const user = await storage.getUserByEmail('demo@example.com');\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const validatedData = addXpSchema.parse(req.body);\n      const { xpDelta } = validatedData;\n      \n      // Atomic XP increment\n      const newXp = user.xp + xpDelta;\n      const updatedUser = await storage.updateUser(user.id, { xp: newXp });\n      \n      console.log(`XP added: ${user.xp} + ${xpDelta} = ${newXp}`);\n      \n      res.json({ \n        success: true, \n        user: updatedUser, \n        xpAdded: xpDelta,\n        previousXp: user.xp,\n        newXp: newXp\n      });\n    } catch (error) {\n      console.error(\"Error adding XP:\", error);\n      res.status(500).json({ error: \"Failed to add XP\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13411},"server/storage.ts":{"content":"import { type User, type InsertUser, type Material, type InsertMaterial, type Deck, type InsertDeck, type Flashcard, type InsertFlashcard, type StudySession, type InsertStudySession, type Settings, type InsertSettings } from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Materials\n  getMaterialsByUserId(userId: string): Promise<Material[]>;\n  getMaterial(id: string): Promise<Material | undefined>;\n  createMaterial(material: InsertMaterial): Promise<Material>;\n  updateMaterial(id: string, updates: Partial<Material>): Promise<Material | undefined>;\n  deleteMaterial(id: string): Promise<boolean>;\n\n  // Decks\n  getDecksByUserId(userId: string): Promise<Deck[]>;\n  getDeck(id: string): Promise<Deck | undefined>;\n  createDeck(deck: InsertDeck): Promise<Deck>;\n  updateDeck(id: string, updates: Partial<Deck>): Promise<Deck | undefined>;\n  deleteDeck(id: string): Promise<boolean>;\n\n  // Flashcards\n  getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]>;\n  getFlashcardsByMaterialId(materialId: string): Promise<Flashcard[]>;\n  getFlashcardsByUserId(userId: string): Promise<Flashcard[]>;\n  getFlashcardsForReview(userId: string): Promise<Flashcard[]>;\n  getFlashcardsForReviewByDeck(deckId: string): Promise<Flashcard[]>;\n  getFlashcard(id: string): Promise<Flashcard | undefined>;\n  createFlashcard(flashcard: InsertFlashcard): Promise<Flashcard>;\n  updateFlashcard(id: string, updates: Partial<Flashcard>): Promise<Flashcard | undefined>;\n  deleteFlashcard(id: string): Promise<boolean>;\n\n  // Study Sessions\n  getStudySessionsByUserId(userId: string): Promise<StudySession[]>;\n  createStudySession(session: InsertStudySession): Promise<StudySession>;\n\n  // Settings\n  getSettings(userId: string): Promise<Settings | undefined>;\n  createOrUpdateSettings(settings: InsertSettings): Promise<Settings>;\n}\n\nimport { DatabaseStorage } from './database-storage';\n\nexport const storage = new DatabaseStorage();\n\n// Clean seed database function with minimal demo data\nexport async function seedDatabase() {\n  try {\n    // Check if demo user already exists\n    const demoUser = await storage.getUserByEmail('demo@example.com');\n    if (demoUser) {\n      console.log('Demo data already exists');\n      return;\n    }\n\n    console.log('Seeding database with clean demo data...');\n    \n    // Create demo user with 0 XP (user requirement: XP only from real events)\n    const user = await storage.createUser({\n      username: 'demo',\n      email: 'demo@example.com',\n      password: 'demo',\n      xp: 0, // Start with 0 XP as requested\n      level: 1,\n      currentAnimal: 'Hangya', // First level according to our progression\n    });\n\n    // Create initial empty settings for the demo user\n    await storage.createOrUpdateSettings({\n      userId: user.id,\n      openaiApiKey: null,\n      theme: 'light',\n      accentColor: 'blue',\n      focusAlerts: true,\n      dailyReminders: false,\n      cardDifficulty: 'medium',\n    });\n\n    console.log('Database seeded successfully with clean data!');\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}\n\n// One-time migration to clean up demo data and reset XP\nexport async function cleanDemoData() {\n  try {\n    const demoUser = await storage.getUserByEmail('demo@example.com');\n    if (demoUser && (demoUser.xp || 0) > 0) {\n      console.log('Cleaning demo XP data...');\n      await storage.updateUser(demoUser.id, {\n        xp: 0,\n        level: 1,\n        currentAnimal: 'Hangya'\n      });\n      console.log('Demo data cleaned successfully!');\n    }\n  } catch (error) {\n    console.error('Error cleaning demo data:', error);\n  }\n}","size_bytes":3918},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  xp: integer(\"xp\").default(0),\n  level: integer(\"level\").default(1),\n  currentAnimal: text(\"current_animal\").default(\"Kezdő Nyúl\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const materials = pgTable(\"materials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  summary: text(\"summary\"),\n  type: text(\"type\").notNull(), // 'text', 'pdf', 'image'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const decks = pgTable(\"decks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastStudied: timestamp(\"last_studied\"),\n});\n\nexport const flashcards = pgTable(\"flashcards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  deckId: varchar(\"deck_id\").references(() => decks.id),\n  materialId: varchar(\"material_id\").references(() => materials.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  difficulty: integer(\"difficulty\").default(1), // 1-5 scale\n  nextReview: timestamp(\"next_review\").defaultNow(),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  correctCount: integer(\"correct_count\").default(0),\n  incorrectCount: integer(\"incorrect_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // 'focus', 'cards', 'chat'\n  duration: integer(\"duration\"), // in minutes\n  xpEarned: integer(\"xp_earned\").default(0),\n  cardsStudied: integer(\"cards_studied\").default(0),\n  correctCards: integer(\"correct_cards\").default(0),\n  focusInterrupted: boolean(\"focus_interrupted\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).unique(),\n  openaiApiKey: text(\"openai_api_key\"),\n  theme: text(\"theme\").default(\"light\"),\n  accentColor: text(\"accent_color\").default(\"blue\"),\n  focusAlerts: boolean(\"focus_alerts\").default(true),\n  dailyReminders: boolean(\"daily_reminders\").default(false),\n  cardDifficulty: text(\"card_difficulty\").default(\"medium\"),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMaterialSchema = createInsertSchema(materials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDeckSchema = createInsertSchema(decks).omit({\n  id: true,\n  createdAt: true,\n  lastStudied: true,\n});\n\nexport const insertFlashcardSchema = createInsertSchema(flashcards).omit({\n  id: true,\n  createdAt: true,\n  lastReviewed: true,\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Material = typeof materials.$inferSelect;\nexport type InsertMaterial = z.infer<typeof insertMaterialSchema>;\nexport type Deck = typeof decks.$inferSelect;\nexport type InsertDeck = z.infer<typeof insertDeckSchema>;\nexport type Flashcard = typeof flashcards.$inferSelect;\nexport type InsertFlashcard = z.infer<typeof insertFlashcardSchema>;\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type Settings = typeof settings.$inferSelect;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  materials: many(materials),\n  decks: many(decks),\n  flashcards: many(flashcards),\n  studySessions: many(studySessions),\n  settings: one(settings),\n}));\n\nexport const materialsRelations = relations(materials, ({ one, many }) => ({\n  user: one(users, {\n    fields: [materials.userId],\n    references: [users.id],\n  }),\n  flashcards: many(flashcards),\n}));\n\nexport const decksRelations = relations(decks, ({ one, many }) => ({\n  user: one(users, {\n    fields: [decks.userId],\n    references: [users.id],\n  }),\n  flashcards: many(flashcards),\n}));\n\nexport const flashcardsRelations = relations(flashcards, ({ one }) => ({\n  user: one(users, {\n    fields: [flashcards.userId],\n    references: [users.id],\n  }),\n  deck: one(decks, {\n    fields: [flashcards.deckId],\n    references: [decks.id],\n  }),\n  material: one(materials, {\n    fields: [flashcards.materialId],\n    references: [materials.id],\n  }),\n}));\n\nexport const studySessionsRelations = relations(studySessions, ({ one }) => ({\n  user: one(users, {\n    fields: [studySessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const settingsRelations = relations(settings, ({ one }) => ({\n  user: one(users, {\n    fields: [settings.userId],\n    references: [users.id],\n  }),\n}));\n","size_bytes":5880},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Layout from \"@/components/Layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Functions from \"@/pages/Functions\";\nimport Upload from \"@/pages/Upload\";\nimport Cards from \"@/pages/Cards\";\nimport DeckManager from \"@/pages/DeckManager\";\nimport StudyMode from \"@/pages/StudyMode\";\nimport Chat from \"@/pages/Chat\";\nimport Focus from \"@/pages/Focus\";\nimport Progress from \"@/pages/Progress\";\nimport Settings from \"@/pages/Settings\";\nimport Auth from \"@/pages/Auth\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Functions} />\n        <Route path=\"/functions\" component={Functions} />\n        <Route path=\"/upload\" component={Upload} />\n        <Route path=\"/cards\" component={Cards} />\n        <Route path=\"/cards/:deckId\" component={DeckManager} />\n        <Route path=\"/study/:deckId\" component={StudyMode} />\n        <Route path=\"/chat\" component={Chat} />\n        <Route path=\"/focus\" component={Focus} />\n        <Route path=\"/progress\" component={Progress} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/auth\" component={Auth} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"zap-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1840},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light theme colors - Enhanced for WCAG-AA contrast */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222.2 84% 4.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222.2 84% 4.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222.2 84% 4.9%);\n  \n  /* Enhanced primary with better contrast */\n  --primary: hsl(221.2 83.2% 50.0%);\n  --primary-foreground: hsl(210 40% 98%);\n  \n  /* Improved neutral grays for better contrast hierarchy */\n  --secondary: hsl(210 40% 94%);\n  --secondary-foreground: hsl(222.2 84% 11.2%);\n  --muted: hsl(210 40% 94%);\n  --muted-foreground: hsl(215.4 16.3% 44.9%);  /* Darkened for 4.5:1 contrast */\n  --accent: hsl(210 40% 94%);\n  --accent-foreground: hsl(222.2 84% 11.2%);\n  \n  /* Enhanced destructive for better visibility */\n  --destructive: hsl(0 84.2% 55.0%);\n  --destructive-foreground: hsl(210 40% 98%);\n  \n  /* WCAG-AA compliant borders - 3:1 contrast on white */\n  --border: hsl(214.3 31.8% 58.0%);\n  --input: hsl(214.3 31.8% 52.0%);\n  --border-strong: hsl(214.3 31.8% 48.0%);\n  --ring: hsl(221.2 83.2% 50.0%);\n  --chart-1: hsl(221.2 83.2% 53.3%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-primary: hsl(221.2 83.2% 50.0%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 94%);\n  --sidebar-accent-foreground: hsl(222.2 84% 11.2%);\n  --sidebar-border: hsl(214.3 31.8% 58.0%);\n  --sidebar-ring: hsl(221.2 83.2% 50.0%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  /* Typography Scale - Mobile-first approach */\n  --text-xs: 0.75rem;     /* 12px */\n  --text-sm: 0.875rem;    /* 14px */\n  --text-base: 1rem;      /* 16px */\n  --text-lg: 1.125rem;    /* 18px */\n  --text-xl: 1.25rem;     /* 20px */\n  --text-2xl: 1.5rem;     /* 24px */\n  --text-3xl: 1.875rem;   /* 30px */\n  --text-4xl: 2.25rem;    /* 36px */\n  --text-5xl: 3rem;       /* 48px */\n  \n  /* Line Heights for optimal readability */\n  --leading-tight: 1.25;\n  --leading-snug: 1.375;\n  --leading-normal: 1.5;\n  --leading-relaxed: 1.625;\n  --leading-loose: 2;\n  \n  /* Spacing Scale - Consistent spacing system */\n  --spacing-xs: 0.5rem;   /* 8px */\n  --spacing-sm: 0.75rem;  /* 12px */\n  --spacing-md: 1rem;     /* 16px */\n  --spacing-lg: 1.5rem;   /* 24px */\n  --spacing-xl: 2rem;     /* 32px */\n  --spacing-2xl: 2.5rem;  /* 40px */\n  --spacing-3xl: 3rem;    /* 48px */\n  --spacing-4xl: 4rem;    /* 64px */\n  \n  /* Container widths - Mobile-first responsive */\n  --container-xs: 20rem;   /* 320px */\n  --container-sm: 24rem;   /* 384px */\n  --container-md: 28rem;   /* 448px */\n  --container-lg: 32rem;   /* 512px */\n  --container-xl: 36rem;   /* 576px */\n  --container-2xl: 42rem;  /* 672px */\n  --container-full: 100%;\n  \n  /* Enhanced shadows with proper opacity */\n  --shadow-xs: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow-sm: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-md: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);\n  --shadow-2xl: 0 50px 100px -20px rgb(0 0 0 / 0.25);\n  \n  /* Focus and interaction states */\n  --focus-ring: 2px solid var(--ring);\n  --focus-ring-offset: 2px;\n  \n  /* Minimum touch target for mobile */\n  --touch-target-min: 44px;\n}\n\n/* Accent Color Themes */\n.accent-blue {\n  /* Blue/Kék (Default) - already set above */\n}\n\n/* Enhanced accent themes with WCAG-AA compliance */\n.accent-purple {\n  --primary: hsl(262.1 83.3% 52.0%);\n  --primary-foreground: hsl(210 40% 98%);\n  --ring: hsl(262.1 83.3% 52.0%);\n  --chart-1: hsl(262.1 83.3% 52.0%);\n  --sidebar-primary: hsl(262.1 83.3% 52.0%);\n  --sidebar-ring: hsl(262.1 83.3% 52.0%);\n}\n\n.accent-green {\n  --primary: hsl(142.1 76.2% 40.0%);\n  --primary-foreground: hsl(210 40% 98%);\n  --ring: hsl(142.1 76.2% 40.0%);\n  --chart-1: hsl(142.1 76.2% 40.0%);\n  --sidebar-primary: hsl(142.1 76.2% 40.0%);\n  --sidebar-ring: hsl(142.1 76.2% 40.0%);\n}\n\n.accent-amber {\n  --primary: hsl(47.9 95.8% 48.0%);\n  --primary-foreground: hsl(26 83.3% 14.1%);\n  --ring: hsl(47.9 95.8% 48.0%);\n  --chart-1: hsl(47.9 95.8% 48.0%);\n  --sidebar-primary: hsl(47.9 95.8% 48.0%);\n  --sidebar-ring: hsl(47.9 95.8% 48.0%);\n}\n\n.dark {\n  /* Dark theme colors - Enhanced for WCAG-AA contrast */\n  --background: hsl(222.2 84% 4.9%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222.2 84% 4.9%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222.2 84% 4.9%);\n  --popover-foreground: hsl(210 40% 98%);\n  \n  /* Enhanced primary for dark mode visibility */\n  --primary: hsl(217.2 91.2% 65.0%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  \n  /* Improved neutral grays for dark mode contrast */\n  --secondary: hsl(217.2 32.6% 20.0%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217.2 32.6% 20.0%);\n  --muted-foreground: hsl(215 20.2% 70.0%);  /* Lightened for better contrast */\n  --accent: hsl(217.2 32.6% 20.0%);\n  --accent-foreground: hsl(210 40% 98%);\n  \n  /* Enhanced destructive for dark mode */\n  --destructive: hsl(0 84.2% 65.0%);\n  --destructive-foreground: hsl(222.2 84% 4.9%);\n  \n  /* Refined borders and inputs for dark mode */\n  --border: hsl(217.2 32.6% 20.0%);\n  --input: hsl(217.2 32.6% 20.0%);\n  --ring: hsl(217.2 91.2% 65.0%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(222.2 84% 4.9%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217.2 91.2% 65.0%);\n  --sidebar-primary-foreground: hsl(222.2 84% 4.9%);\n  --sidebar-accent: hsl(217.2 32.6% 20.0%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(217.2 32.6% 20.0%);\n  --sidebar-ring: hsl(217.2 91.2% 65.0%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n/* Dark theme accent color overrides */\n/* Dark theme accent overrides with enhanced contrast */\n.dark.accent-purple {\n  --primary: hsl(263.4 70% 68.0%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --ring: hsl(263.4 70% 68.0%);\n  --chart-1: hsl(263.4 70% 68.0%);\n  --sidebar-primary: hsl(263.4 70% 68.0%);\n  --sidebar-ring: hsl(263.4 70% 68.0%);\n}\n\n.dark.accent-green {\n  --primary: hsl(142.1 70.6% 65.0%);\n  --primary-foreground: hsl(222.2 84% 4.9%);\n  --ring: hsl(142.1 70.6% 65.0%);\n  --chart-1: hsl(142.1 70.6% 65.0%);\n  --sidebar-primary: hsl(142.1 70.6% 65.0%);\n  --sidebar-ring: hsl(142.1 70.6% 65.0%);\n}\n\n.dark.accent-amber {\n  --primary: hsl(47.9 95.8% 70.0%);\n  --primary-foreground: hsl(26 83.3% 14.1%);\n  --ring: hsl(47.9 95.8% 70.0%);\n  --chart-1: hsl(47.9 95.8% 70.0%);\n  --sidebar-primary: hsl(47.9 95.8% 70.0%);\n  --sidebar-ring: hsl(47.9 95.8% 70.0%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    line-height: var(--leading-normal);\n  }\n  \n  /* Typography classes with consistent sizing and spacing */\n  h1 {\n    font-size: var(--text-4xl);\n    line-height: var(--leading-tight);\n    font-weight: 700;\n    letter-spacing: -0.025em;\n    margin-bottom: var(--spacing-lg);\n  }\n  \n  h2 {\n    font-size: var(--text-3xl);\n    line-height: var(--leading-tight);\n    font-weight: 600;\n    letter-spacing: -0.025em;\n    margin-bottom: var(--spacing-md);\n  }\n  \n  h3 {\n    font-size: var(--text-2xl);\n    line-height: var(--leading-snug);\n    font-weight: 600;\n    margin-bottom: var(--spacing-md);\n  }\n  \n  h4 {\n    font-size: var(--text-xl);\n    line-height: var(--leading-snug);\n    font-weight: 600;\n    margin-bottom: var(--spacing-sm);\n  }\n  \n  h5 {\n    font-size: var(--text-lg);\n    line-height: var(--leading-normal);\n    font-weight: 600;\n    margin-bottom: var(--spacing-sm);\n  }\n  \n  h6 {\n    font-size: var(--text-base);\n    line-height: var(--leading-normal);\n    font-weight: 600;\n    margin-bottom: var(--spacing-xs);\n  }\n  \n  p {\n    font-size: var(--text-base);\n    line-height: var(--leading-relaxed);\n    margin-bottom: var(--spacing-md);\n  }\n  \n  .text-body-sm {\n    font-size: var(--text-sm);\n    line-height: var(--leading-normal);\n  }\n  \n  .text-body-lg {\n    font-size: var(--text-lg);\n    line-height: var(--leading-relaxed);\n  }\n  \n  /* Container classes for consistent widths */\n  .container-xs { max-width: var(--container-xs); margin: 0 auto; }\n  .container-sm { max-width: var(--container-sm); margin: 0 auto; }\n  .container-md { max-width: var(--container-md); margin: 0 auto; }\n  .container-lg { max-width: var(--container-lg); margin: 0 auto; }\n  .container-xl { max-width: var(--container-xl); margin: 0 auto; }\n  .container-2xl { max-width: var(--container-2xl); margin: 0 auto; }\n  \n  /* Responsive typography for mobile-first */\n  @media (min-width: 640px) {\n    h1 { font-size: var(--text-5xl); }\n    h2 { font-size: var(--text-4xl); }\n    h3 { font-size: var(--text-3xl); }\n  }\n  \n  /* Focus states for accessibility */\n  :focus-visible {\n    outline: var(--focus-ring);\n    outline-offset: var(--focus-ring-offset);\n  }\n  \n  /* Minimum touch targets for mobile */\n  button, [role=\"button\"], input, select, textarea {\n    min-height: var(--touch-target-min);\n    min-width: var(--touch-target-min);\n  }\n  \n  /* Apply stronger borders to interactive elements */\n  input, select, textarea {\n    border-color: var(--input);\n  }\n  \n  .border-strong {\n    border-color: var(--border-strong);\n  }\n  \n  /* WCAG-AA compliant link styling - persistent underlines */\n  a {\n    text-decoration: underline;\n    text-decoration-color: color-mix(in srgb, var(--primary) 70%, transparent);\n    text-underline-offset: 0.15em;\n    color: var(--primary);\n    transition: all 0.15s ease;\n  }\n  \n  a:hover {\n    color: color-mix(in srgb, var(--primary) 80%, transparent);\n    text-decoration-color: var(--primary);\n  }\n  \n  a:focus-visible {\n    outline: var(--focus-ring);\n    outline-offset: var(--focus-ring-offset);\n    text-decoration-color: var(--primary);\n  }\n  \n  /* Enhanced container with padding for mobile */\n  .container {\n    max-width: var(--container-2xl);\n    margin: 0 auto;\n    padding-inline: var(--spacing-lg);\n  }\n  \n  /* Responsive container padding */\n  @media (min-width: 640px) {\n    .container {\n      padding-inline: var(--spacing-xl);\n    }\n  }\n}\n\n/* FlashCard flip animation styles */\n.flip-card {\n  perspective: 1000px;\n}\n\n.flip-card-inner {\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n}\n\n.flip-card.flipped .flip-card-inner {\n  transform: rotateY(180deg);\n}\n\n.flip-card-front,\n.flip-card-back {\n  backface-visibility: hidden;\n}\n\n.flip-card-back {\n  transform: rotateY(180deg);\n}\n\n/* Progress ring animation */\n.progress-ring {\n  transform: rotate(-90deg);\n}\n\n.progress-ring-circle {\n  transition: stroke-dashoffset 0.35s;\n  transform-origin: 50% 50%;\n}\n\n/* Swipe card animation */\n.swipe-card {\n  transition: transform 0.3s ease, opacity 0.3s ease;\n}\n\n/* Custom scrollbar for better UX */\n.scroll-area {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(var(--muted-foreground)) transparent;\n}\n\n.scroll-area::-webkit-scrollbar {\n  width: 6px;\n}\n\n.scroll-area::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.scroll-area::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.scroll-area::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n","size_bytes":11888},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n\nexport class OpenAIService {\n  private openai: OpenAI | null = null;\n\n  constructor(apiKey?: string) {\n    if (apiKey) {\n      this.openai = new OpenAI({ apiKey });\n    }\n  }\n\n  setApiKey(apiKey: string) {\n    this.openai = new OpenAI({ apiKey });\n  }\n\n  isConfigured(): boolean {\n    return this.openai !== null;\n  }\n\n  async testConnection(): Promise<boolean> {\n    if (!this.openai) return false;\n    \n    try {\n      await this.openai.chat.completions.create({\n        model: \"gpt-5\",\n        messages: [{ role: \"user\", content: \"Hello\" }],\n        max_tokens: 5,\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async generateSummary(text: string): Promise<string> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI API kulcs nincs beállítva\");\n    }\n\n    const response = await this.openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Te egy magyar tanulási asszisztens vagy. Készíts rövid, érthető összefoglalót a megadott szövegről magyar nyelven. Az összefoglaló legyen 2-3 mondat, és tartalmazza a legfontosabb pontokat.\"\n        },\n        {\n          role: \"user\",\n          content: `Készíts összefoglalót erről a szövegről: ${text}`\n        }\n      ],\n      max_tokens: 200,\n    });\n\n    return response.choices[0].message.content || \"Nem sikerült összefoglalót készíteni.\";\n  }\n\n  async generateFlashcards(text: string): Promise<Array<{ question: string; answer: string }>> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI API kulcs nincs beállítva\");\n    }\n\n    const response = await this.openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Te egy magyar tanulási asszisztens vagy. Készíts 5-8 tanulókártyát a megadott szövegből. Minden kártya legyen egy kérdés-válasz pár. A kérdések legyenek világosak és specifikusak, a válaszok rövidek és pontosak. Válaszolj JSON formátumban: {\\\"cards\\\": [{\\\"question\\\": \\\"...\\\", \\\"answer\\\": \\\"...\\\"}]}\"\n        },\n        {\n          role: \"user\",\n          content: `Készíts tanulókártyákat erről a szövegről: ${text}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 1000,\n    });\n\n    try {\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return result.cards || [];\n    } catch (error) {\n      throw new Error(\"Nem sikerült kártyákat generálni a válaszból.\");\n    }\n  }\n\n  async chatGlobal(message: string, conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>): Promise<string> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI API kulcs nincs beállítva\");\n    }\n\n    const messages = [\n      {\n        role: \"system\" as const,\n        content: \"Te egy barátságos magyar tanulási asszisztens vagy. Segíts a felhasználónak bármilyen tanulással kapcsolatos kérdésben. Válaszolj magyarul, legyen informatív és motiváló.\"\n      },\n      ...conversationHistory,\n      { role: \"user\" as const, content: message }\n    ];\n\n    const response = await this.openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages,\n      max_tokens: 500,\n    });\n\n    return response.choices[0].message.content || \"Sajnos nem tudok válaszolni erre a kérdésre.\";\n  }\n\n  async chatWithContext(message: string, context: string, conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>): Promise<string> {\n    if (!this.openai) {\n      throw new Error(\"OpenAI API kulcs nincs beállítva\");\n    }\n\n    const messages = [\n      {\n        role: \"system\" as const,\n        content: `Te egy magyar tanulási asszisztens vagy. A felhasználó kérdései a következő tananyagról szólnak: \"${context}\". Válaszolj a kérdésekre a tananyag alapján, magyarul. Ha a kérdés nem kapcsolódik a tananyaghoz, udvariasan tereld vissza a témához.`\n      },\n      ...conversationHistory,\n      { role: \"user\" as const, content: message }\n    ];\n\n    const response = await this.openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages,\n      max_tokens: 500,\n    });\n\n    return response.choices[0].message.content || \"Sajnos nem tudok válaszolni erre a kérdésre.\";\n  }\n}\n\n// Global instance that can be configured with API key\nexport const openaiService = new OpenAIService(process.env.OPENAI_API_KEY);\n","size_bytes":4623},"client/src/components/FlashCard.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Check, X, RotateCcw } from 'lucide-react';\n\ninterface FlashCardProps {\n  question: string;\n  answer: string;\n  onKnown: () => void;\n  onUnknown: () => void;\n  className?: string;\n}\n\nexport default function FlashCard({ question, answer, onKnown, onUnknown, className = \"\" }: FlashCardProps) {\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  const handleFlip = () => {\n    setIsFlipped(!isFlipped);\n  };\n\n  const handleKnown = () => {\n    onKnown();\n    setIsFlipped(false);\n  };\n\n  const handleUnknown = () => {\n    onUnknown();\n    setIsFlipped(false);\n  };\n\n  return (\n    <div className={`flip-card cursor-pointer ${isFlipped ? 'flipped' : ''} ${className}`} data-testid=\"flashcard\">\n      <div className=\"flip-card-inner w-full h-full\">\n        {/* Front Side - Question */}\n        <Card \n          className=\"flip-card-front absolute inset-0 border-2 border-border hover:border-primary/50 transition-colors shadow-lg\"\n          onClick={handleFlip}\n          data-testid=\"flashcard-front\"\n        >\n          <CardContent className=\"p-6 h-full flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">{question}</h3>\n              <p className=\"text-sm text-muted-foreground mt-4\">Kattints a megfordításhoz</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Back Side - Answer */}\n        <Card \n          className=\"flip-card-back absolute inset-0 bg-primary border-2 border-primary shadow-lg\"\n          onClick={handleFlip}\n          data-testid=\"flashcard-back\"\n        >\n          <CardContent className=\"p-6 h-full flex flex-col items-center justify-center\">\n            <div className=\"text-center flex-1 flex flex-col justify-center\">\n              <h3 className=\"text-lg font-semibold text-primary-foreground mb-4\">{answer}</h3>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex gap-4 mt-4\" onClick={(e) => e.stopPropagation()}>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={handleUnknown}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                data-testid=\"button-unknown\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Nem tudom\n              </Button>\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={handleKnown}\n                className=\"bg-green-600 text-white hover:bg-green-700\"\n                data-testid=\"button-known\"\n              >\n                <Check className=\"w-4 h-4 mr-2\" />\n                Tudom\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2993},"client/src/components/Layout.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from '@/components/ThemeProvider';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport useStore from '@/store/useStore';\nimport { \n  Sun, \n  Moon, \n  Menu, \n  X,\n  Upload,\n  Layers,\n  MessageCircle,\n  Clock,\n  TrendingUp,\n  Settings,\n  UserPlus\n} from 'lucide-react';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location, setLocation] = useLocation();\n  const { theme, setTheme } = useTheme();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { focusState, resetFocus, setFocusState } = useStore();\n  const [showFocusExitDialog, setShowFocusExitDialog] = useState(false);\n  const [pendingNavigation, setPendingNavigation] = useState<string | null>(null);\n\n  const navigation = [\n    { name: 'Funkciók', href: '/', icon: Layers },\n    { name: 'Kártyák', href: '/cards', icon: Layers },\n    { name: 'Fókusz mód', href: '/focus', icon: Clock },\n    { name: 'Feltöltés', href: '/upload', icon: Upload },\n    { name: 'Haladás', href: '/progress', icon: TrendingUp },\n    { name: 'Regisztráció / Belépés', href: '/auth', icon: UserPlus },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/') {\n      return location === '/' || location === '/functions';\n    }\n    return location === href;\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n\n  const handleNavigation = (href: string, event: React.MouseEvent) => {\n    // Don't prevent navigation if already on the same page or focus is not active\n    if (location === href || !focusState.isActive) {\n      return; // Allow normal navigation\n    }\n\n    // Set dialog flag FIRST to prevent race condition with focus detector\n    setFocusState({ isUIDialogOpen: true });\n    \n    // Then prevent the default Link behavior and show confirmation\n    event.preventDefault();\n    setPendingNavigation(href);\n    setShowFocusExitDialog(true);\n  };\n\n  const handleFocusExit = () => {\n    setFocusState({ isUIDialogOpen: false }); // Clear dialog flag\n    if (pendingNavigation) {\n      resetFocus(); // Reset focus state\n      setLocation(pendingNavigation); // Navigate to the pending location\n      setPendingNavigation(null);\n    }\n    setShowFocusExitDialog(false);\n  };\n\n  const handleCancelNavigation = () => {\n    setFocusState({ isUIDialogOpen: false }); // Clear dialog flag\n    setPendingNavigation(null);\n    setShowFocusExitDialog(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Navigation */}\n      <nav className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <Link href=\"/\" className=\"flex-shrink-0\" data-testid=\"logo-link\">\n                <span className=\"text-2xl font-bold text-primary\">ZAP</span>\n              </Link>\n            </div>\n\n            {/* Desktop Navigation */}\n            <div className=\"hidden md:block\">\n              <div className=\"ml-10 flex items-baseline space-x-4\">\n                {navigation.map((item) => (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    onClick={(e) => handleNavigation(item.href, e)}\n                    data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Button\n                      variant=\"ghost\"\n                      className={`px-3 py-2 text-sm font-medium transition-colors ${\n                        isActive(item.href)\n                          ? 'text-foreground bg-accent'\n                          : focusState.isActive && location !== item.href\n                            ? 'text-muted-foreground/50 hover:text-muted-foreground cursor-not-allowed'\n                            : 'text-muted-foreground hover:text-primary hover:bg-accent'\n                      }`}\n                      disabled={focusState.isActive && location !== item.href}\n                    >\n                      {item.name}\n                    </Button>\n                  </Link>\n                ))}\n              </div>\n            </div>\n\n            {/* Theme Toggle & Mobile Menu */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                data-testid=\"theme-toggle\"\n              >\n                {theme === 'dark' ? (\n                  <Sun className=\"h-5 w-5\" />\n                ) : (\n                  <Moon className=\"h-5 w-5\" />\n                )}\n              </Button>\n              \n              {/* Mobile menu button */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"mobile-menu-toggle\"\n              >\n                {mobileMenuOpen ? (\n                  <X className=\"h-5 w-5\" />\n                ) : (\n                  <Menu className=\"h-5 w-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden border-t border-border\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  onClick={(e) => {\n                    setMobileMenuOpen(false);\n                    handleNavigation(item.href, e);\n                  }}\n                  data-testid={`mobile-nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-start px-3 py-2 text-base font-medium transition-colors ${\n                      isActive(item.href)\n                        ? 'text-foreground bg-accent'\n                        : focusState.isActive && location !== item.href\n                          ? 'text-muted-foreground/50 hover:text-muted-foreground cursor-not-allowed'\n                          : 'text-muted-foreground hover:text-primary hover:bg-accent'\n                    }`}\n                    disabled={focusState.isActive && location !== item.href}\n                  >\n                    <item.icon className=\"mr-3 h-5 w-5\" />\n                    {item.name}\n                  </Button>\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {children}\n      </main>\n\n      {/* Focus Exit Confirmation Dialog */}\n      <AlertDialog open={showFocusExitDialog} onOpenChange={setShowFocusExitDialog}>\n        <AlertDialogContent data-testid=\"focus-exit-dialog\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Fókusz munkamenet aktív</AlertDialogTitle>\n            <AlertDialogDescription>\n              Jelenleg egy fókusz munkamenet van folyamatban. Ha most navigálsz, a munkamenet megszakad és elvész a haladás.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={handleCancelNavigation} data-testid=\"button-cancel-navigation\">\n              Maradok itt\n            </AlertDialogCancel>\n            <AlertDialogAction onClick={handleFocusExit} data-testid=\"button-confirm-navigation\">\n              Munkamenet befejezése\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":8300},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect } from 'react';\nimport useStore from '@/store/useStore';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: 'system',\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'zap-ui-theme',\n  ...props\n}: ThemeProviderProps) {\n  const { theme, setTheme: setStoreTheme, accentColor } = useStore();\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove('light', 'dark');\n\n    if (theme === 'auto') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches\n        ? 'dark'\n        : 'light';\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  // Apply accent color theme\n  useEffect(() => {\n    const root = window.document.documentElement;\n    // Remove all accent color classes\n    root.classList.remove('accent-blue', 'accent-purple', 'accent-green', 'accent-amber');\n    \n    // Apply current accent color class\n    if (accentColor) {\n      root.classList.add(`accent-${accentColor}`);\n    }\n  }, [accentColor]);\n\n  const value = {\n    theme: theme as Theme,\n    setTheme: (theme: Theme) => {\n      setStoreTheme(theme === 'system' ? 'auto' : theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider');\n\n  return context;\n};\n","size_bytes":1960},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Auth.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Auth() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData(event.currentTarget);\n    const email = formData.get('email') as string;\n    const password = formData.get('password') as string;\n\n    // Demo implementation - in real app would call API\n    setTimeout(() => {\n      setIsLoading(false);\n      toast({\n        title: \"Bejelentkezés sikeres!\",\n        description: `Üdvözlünk, ${email}!`,\n      });\n    }, 1000);\n  };\n\n  const handleRegister = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const formData = new FormData(event.currentTarget);\n    const name = formData.get('name') as string;\n    const email = formData.get('email') as string;\n    const password = formData.get('password') as string;\n    const confirmPassword = formData.get('confirmPassword') as string;\n\n    if (password !== confirmPassword) {\n      toast({\n        title: \"Hiba\",\n        description: \"A jelszavak nem egyeznek!\",\n        variant: \"destructive\"\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    // Demo implementation - in real app would call API\n    setTimeout(() => {\n      setIsLoading(false);\n      toast({\n        title: \"Regisztráció sikeres!\",\n        description: `Üdvözlünk a ZAP-ban, ${name}!`,\n      });\n    }, 1000);\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    toast({\n      title: \"Funkció fejlesztés alatt\",\n      description: `${provider} bejelentkezés hamarosan elérhető lesz.`,\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Üdvözlünk a ZAP-ban!</h1>\n          <p className=\"text-muted-foreground\">Jelentkezz be vagy regisztrálj a kezdéshez</p>\n        </div>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Belépés</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Regisztráció</TabsTrigger>\n              </TabsList>\n\n              {/* Login Form */}\n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\" data-testid=\"form-login\">\n                  <div>\n                    <Label htmlFor=\"login-email\" className=\"text-sm font-medium text-card-foreground\">\n                      Email cím\n                    </Label>\n                    <Input\n                      id=\"login-email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"email@example.com\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-login-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"login-password\" className=\"text-sm font-medium text-card-foreground\">\n                      Jelszó\n                    </Label>\n                    <Input\n                      id=\"login-password\"\n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-login-password\"\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox id=\"remember\" name=\"remember\" data-testid=\"checkbox-remember\" />\n                      <Label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                        Emlékezz rám\n                      </Label>\n                    </div>\n                    <Button\n                      variant=\"link\"\n                      className=\"p-0 h-auto text-sm text-primary hover:underline\"\n                      type=\"button\"\n                      data-testid=\"link-forgot-password\"\n                    >\n                      Elfelejtett jelszó?\n                    </Button>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full\"\n                    data-testid=\"button-login\"\n                  >\n                    {isLoading ? \"Bejelentkezés...\" : \"Belépés\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              {/* Register Form */}\n              <TabsContent value=\"register\">\n                <form onSubmit={handleRegister} className=\"space-y-4\" data-testid=\"form-register\">\n                  <div>\n                    <Label htmlFor=\"register-name\" className=\"text-sm font-medium text-card-foreground\">\n                      Név\n                    </Label>\n                    <Input\n                      id=\"register-name\"\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Teljes név\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-register-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-email\" className=\"text-sm font-medium text-card-foreground\">\n                      Email cím\n                    </Label>\n                    <Input\n                      id=\"register-email\"\n                      name=\"email\"\n                      type=\"email\"\n                      placeholder=\"email@example.com\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-register-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-password\" className=\"text-sm font-medium text-card-foreground\">\n                      Jelszó\n                    </Label>\n                    <Input\n                      id=\"register-password\"\n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-register-password\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"register-confirm-password\" className=\"text-sm font-medium text-card-foreground\">\n                      Jelszó megerősítése\n                    </Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      required\n                      className=\"mt-1\"\n                      data-testid=\"input-register-confirm-password\"\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"terms\" name=\"terms\" required data-testid=\"checkbox-terms\" />\n                    <Label htmlFor=\"terms\" className=\"text-sm text-muted-foreground\">\n                      Elfogadom a{\" \"}\n                      <Button\n                        variant=\"link\"\n                        className=\"p-0 h-auto text-sm text-primary hover:underline\"\n                        type=\"button\"\n                        data-testid=\"link-terms\"\n                      >\n                        felhasználási feltételeket\n                      </Button>\n                    </Label>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full\"\n                    data-testid=\"button-register\"\n                  >\n                    {isLoading ? \"Regisztráció...\" : \"Regisztráció\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            {/* Social Login */}\n            <div className=\"mt-6 pt-6 border-t border-border\">\n              <p className=\"text-center text-sm text-muted-foreground mb-4\">\n                Vagy folytasd a következővel\n              </p>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleSocialLogin('Google')}\n                  className=\"flex items-center justify-center\"\n                  data-testid=\"button-google-login\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                    />\n                    <path\n                      fill=\"currentColor\"\n                      d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                    />\n                  </svg>\n                  Google\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => handleSocialLogin('Facebook')}\n                  className=\"flex items-center justify-center\"\n                  data-testid=\"button-facebook-login\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n                  </svg>\n                  Facebook\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11378},"client/src/pages/Cards.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, BookOpen, Clock, Calendar, Settings, Trash2, Edit3, Target } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { apiRequest } from '@/lib/queryClient';\nimport useStore from '@/store/useStore';\nimport type { Deck, Flashcard } from '@shared/schema';\n\ninterface DeckStats {\n  totalCards: number;\n  dueToday: number;\n  lastStudied: string | null;\n}\n\nexport default function Cards() {\n  const [showNewDeckForm, setShowNewDeckForm] = useState(false);\n  const [newDeckName, setNewDeckName] = useState('');\n  const [newDeckDescription, setNewDeckDescription] = useState('');\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { cardDifficulty, setCardDifficulty } = useStore();\n\n  // Query for decks\n  const { data: decks = [], isLoading } = useQuery({\n    queryKey: ['/api/decks'],\n    refetchOnWindowFocus: false,\n  }) as { data: Deck[]; isLoading: boolean };\n\n  // Create deck mutation\n  const createDeckMutation = useMutation({\n    mutationFn: async (data: { name: string; description?: string }) => {\n      const response = await apiRequest('/api/decks', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/decks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', 'with-stats'] });\n      setShowNewDeckForm(false);\n      setNewDeckName('');\n      setNewDeckDescription('');\n      toast({\n        title: \"Pakli létrehozva!\",\n        description: \"Az új pakli sikeresen létrehozva.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hiba!\",\n        description: \"Nem sikerült létrehozni a paklit.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Fetch deck cards for stats\n  const deckQueries = decks.map((deck: Deck) => ({\n    queryKey: [`/api/decks/${deck.id}/cards`],\n    enabled: !!deck.id,\n  }));\n  \n  const deckReviewQueries = decks.map((deck: Deck) => ({\n    queryKey: [`/api/decks/${deck.id}/review`],\n    enabled: !!deck.id,\n  }));\n\n  // Function to get real deck stats\n  const getDeckStats = (deck: Deck): DeckStats => {\n    // Get cards data from query cache\n    const cardsData = queryClient.getQueryData([`/api/decks/${deck.id}/cards`]) as Flashcard[] | undefined;\n    const reviewData = queryClient.getQueryData([`/api/decks/${deck.id}/review`]) as Flashcard[] | undefined;\n    \n    return {\n      totalCards: cardsData?.length || 0,\n      dueToday: reviewData?.length || 0,\n      lastStudied: deck.lastStudied ? new Date(deck.lastStudied).toLocaleDateString('hu-HU') : null\n    };\n  };\n  \n  // Fetch cards for each deck to get real stats\n  const deckCardQueries = useQuery({\n    queryKey: ['/api/decks', 'with-stats'],\n    queryFn: async () => {\n      if (!decks || decks.length === 0) return [];\n      \n      const decksWithStats = await Promise.all(\n        (decks as Deck[]).map(async (deck: Deck) => {\n          const [cards, reviewCards] = await Promise.all([\n            fetch(`/api/decks/${deck.id}/cards`).then(r => r.json()),\n            fetch(`/api/decks/${deck.id}/review`).then(r => r.json())\n          ]);\n          \n          // Cache the results for individual queries\n          queryClient.setQueryData([`/api/decks/${deck.id}/cards`], cards);\n          queryClient.setQueryData([`/api/decks/${deck.id}/review`], reviewCards);\n          \n          return { ...deck, cards, reviewCards };\n        })\n      );\n      return decksWithStats;\n    },\n    enabled: Array.isArray(decks) && decks.length > 0,\n    refetchOnWindowFocus: false,\n  });\n\n  const handleCreateDeck = () => {\n    if (!newDeckName.trim()) {\n      toast({\n        title: \"Hiba!\",\n        description: \"A pakli név megadása kötelező.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createDeckMutation.mutate({\n      name: newDeckName.trim(),\n      description: newDeckDescription.trim() || undefined\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Paklik betöltése...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-start\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Paklik</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Kezeld a kártyáidat paklikban a hatékony tanulásért\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          {/* Card Difficulty Setting */}\n          <div className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n            <div className=\"min-w-0\">\n              <Label className=\"text-sm font-medium text-foreground mb-1 block\">\n                Nehézségi szint\n              </Label>\n              <Select \n                value={cardDifficulty} \n                onValueChange={setCardDifficulty}\n              >\n                <SelectTrigger \n                  className=\"w-28 h-8 text-xs\"\n                  data-testid=\"select-card-difficulty\"\n                >\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"easy\">Kezdő</SelectItem>\n                  <SelectItem value=\"medium\">Közepes</SelectItem>\n                  <SelectItem value=\"hard\">Haladó</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <Button\n            onClick={() => setShowNewDeckForm(true)}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-new-deck\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Új pakli\n          </Button>\n        </div>\n      </div>\n\n      {/* New Deck Form */}\n      {showNewDeckForm && (\n        <Card className=\"border-primary/20\" data-testid=\"new-deck-form\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Új pakli létrehozása\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"deck-name\" className=\"block text-sm font-medium mb-2\">\n                Pakli név *\n              </label>\n              <Input\n                id=\"deck-name\"\n                placeholder=\"pl. Magyar történelem, Matematika...\"\n                value={newDeckName}\n                onChange={(e) => setNewDeckName(e.target.value)}\n                data-testid=\"input-deck-name\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"deck-description\" className=\"block text-sm font-medium mb-2\">\n                Leírás (opcionális)\n              </label>\n              <Textarea\n                id=\"deck-description\"\n                placeholder=\"Rövid leírás a pakliról...\"\n                value={newDeckDescription}\n                onChange={(e) => setNewDeckDescription(e.target.value)}\n                data-testid=\"input-deck-description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCreateDeck}\n                disabled={createDeckMutation.isPending}\n                data-testid=\"button-create-deck\"\n              >\n                {createDeckMutation.isPending ? 'Létrehozás...' : 'Pakli létrehozása'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowNewDeckForm(false);\n                  setNewDeckName('');\n                  setNewDeckDescription('');\n                }}\n                data-testid=\"button-cancel-deck\"\n              >\n                Mégse\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {decks.length === 0 && !showNewDeckForm && (\n        <Card className=\"text-center py-12\" data-testid=\"empty-state\">\n          <CardContent>\n            <div className=\"text-6xl mb-4\">📚</div>\n            <h3 className=\"text-lg font-semibold mb-2\">Még nincsenek paklik</h3>\n            <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\">\n              Hozz létre az első paklidat és kezdj el tanulni rendszerezetten! \n              Importálhatsz is kártyákat CSV/TSV fájlból.\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button\n                onClick={() => setShowNewDeckForm(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-create-first-deck\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Hozz létre egy paklit\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-import-deck\"\n              >\n                <BookOpen className=\"h-4 w-4\" />\n                Importálás (CSV/TSV)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Decks Grid */}\n      {decks.length > 0 && (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {decks.map((deck: Deck) => {\n            const stats = getDeckStats(deck);\n            return (\n              <Card \n                key={deck.id} \n                className=\"hover:shadow-lg transition-shadow cursor-pointer group\"\n                data-testid={`deck-card-${deck.id}`}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <CardTitle className=\"text-lg line-clamp-2 group-hover:text-primary transition-colors\">\n                      {deck.name}\n                    </CardTitle>\n                    <div className=\"flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"h-8 w-8 p-0\"\n                        data-testid={`button-edit-deck-${deck.id}`}\n                      >\n                        <Edit3 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                        data-testid={`button-delete-deck-${deck.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  {deck.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                      {deck.description}\n                    </p>\n                  )}\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    {/* Stats */}\n                    <div className=\"flex justify-between text-sm\">\n                      <div className=\"flex items-center gap-1\">\n                        <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                        <span data-testid={`deck-total-cards-${deck.id}`}>\n                          {stats.totalCards} kártya\n                        </span>\n                      </div>\n                      {stats.dueToday > 0 && (\n                        <Badge variant=\"secondary\" data-testid={`deck-due-cards-${deck.id}`}>\n                          {stats.dueToday} esedékes\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Last Studied */}\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span data-testid={`deck-last-studied-${deck.id}`}>\n                        {stats.lastStudied ? `Utoljára: ${stats.lastStudied}` : 'Még nem tanult'}\n                      </span>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-2 pt-2\">\n                      <Link href={`/study/${deck.id}`} className=\"flex-1\">\n                        <Button \n                          size=\"sm\" \n                          className=\"w-full\"\n                          data-testid={`button-study-deck-${deck.id}`}\n                        >\n                          <Clock className=\"h-4 w-4 mr-1\" />\n                          Tanulás\n                        </Button>\n                      </Link>\n                      <Link href={`/cards/${deck.id}`}>\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          data-testid={`button-manage-deck-${deck.id}`}\n                        >\n                          <Settings className=\"h-4 w-4\" />\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":14217},"client/src/pages/Chat.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { api } from '@/services/api';\nimport useStore from '@/store/useStore';\nimport { Send, Bot, User, Loader2, AlertTriangle } from 'lucide-react';\n\nexport default function Chat() {\n  const [message, setMessage] = useState('');\n  const { \n    apiKey, \n    globalChatHistory, \n    addGlobalChatMessage, \n    clearGlobalChat \n  } = useStore();\n  const { toast } = useToast();\n\n  // Chat mutation\n  const chatMutation = useMutation({\n    mutationFn: (data: { message: string; history: any[]; apiKey?: string }) =>\n      api.sendChatMessage(data.message, undefined, data.history, data.apiKey),\n    onSuccess: (data) => {\n      addGlobalChatMessage({\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date()\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Chat hiba\",\n        description: error.message || \"Nem sikerült elküldeni az üzenetet.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n\n    if (!apiKey) {\n      toast({ \n        title: \"API kulcs hiányzik\", \n        description: \"Állítsd be az OpenAI API kulcsot a beállításokban!\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    // Add user message\n    addGlobalChatMessage({\n      role: 'user',\n      content: message,\n      timestamp: new Date()\n    });\n\n    // Send to API\n    chatMutation.mutate({\n      message,\n      history: globalChatHistory,\n      apiKey\n    });\n\n    setMessage('');\n  };\n\n  const handleClearChat = () => {\n    clearGlobalChat();\n    toast({ title: \"Chat törölve\", description: \"A chat előzmények törölve lettek.\" });\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">AI Chat</h1>\n            <p className=\"text-muted-foreground\">Kérdezz bármit a tanulással kapcsolatban</p>\n          </div>\n          {globalChatHistory.length > 0 && (\n            <Button \n              variant=\"outline\" \n              onClick={handleClearChat}\n              data-testid=\"button-clear-chat\"\n            >\n              Chat törlése\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto\">\n        <Card className=\"h-96 flex flex-col\">\n          {/* Chat Messages */}\n          <ScrollArea className=\"flex-1 p-6\" data-testid=\"chat-messages\">\n            <div className=\"space-y-4\">\n              {globalChatHistory.length === 0 && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"bg-primary/10 p-2 rounded-full\">\n                    <Bot className=\"w-4 h-4 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-muted p-3 rounded-lg\">\n                      <p className=\"text-card-foreground\">\n                        Szia! Én vagyok a ZAP AI asszisztensed. Miben segíthetek a tanulásban?\n                      </p>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground mt-1\">Most</span>\n                  </div>\n                </div>\n              )}\n\n              {globalChatHistory.map((msg, index) => (\n                <div \n                  key={index} \n                  className={`flex items-start space-x-3 ${\n                    msg.role === 'user' ? 'justify-end' : ''\n                  }`}\n                  data-testid={`message-${msg.role}-${index}`}\n                >\n                  {msg.role === 'assistant' && (\n                    <div className=\"bg-primary/10 p-2 rounded-full\">\n                      <Bot className=\"w-4 h-4 text-primary\" />\n                    </div>\n                  )}\n                  \n                  <div className={`flex-1 ${msg.role === 'user' ? 'max-w-xs' : ''}`}>\n                    <div className={`p-3 rounded-lg ${\n                      msg.role === 'user' \n                        ? 'bg-primary text-primary-foreground' \n                        : 'bg-muted text-card-foreground'\n                    }`}>\n                      <p>{msg.content}</p>\n                    </div>\n                    <span className={`text-xs text-muted-foreground mt-1 ${\n                      msg.role === 'user' ? 'flex justify-end' : ''\n                    }`}>\n                      {new Date(msg.timestamp).toLocaleTimeString('hu-HU', {\n                        hour: '2-digit',\n                        minute: '2-digit'\n                      })}\n                    </span>\n                  </div>\n\n                  {msg.role === 'user' && (\n                    <div className=\"bg-secondary/50 p-2 rounded-full\">\n                      <User className=\"w-4 h-4 text-secondary-foreground\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n\n              {chatMutation.isPending && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"bg-primary/10 p-2 rounded-full\">\n                    <Bot className=\"w-4 h-4 text-primary\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-muted p-3 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        <p className=\"text-card-foreground\">AI gondolkodik...</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n\n          {/* Chat Input */}\n          <div className=\"border-t border-border p-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Írd be a kérdésedet...\"\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n                disabled={chatMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={chatMutation.isPending || !message.trim()}\n                data-testid=\"button-send-message\"\n              >\n                {chatMutation.isPending ? (\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                ) : (\n                  <Send className=\"w-4 h-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* API Key Warning */}\n        {!apiKey && (\n          <Card className=\"mt-4 border-yellow-200 dark:border-yellow-800 bg-yellow-50 dark:bg-yellow-900/20\" data-testid=\"api-key-warning\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mr-2\" />\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  Az AI chat működéséhez OpenAI API kulcs szükséges. \n                  <Button \n                    variant=\"link\" \n                    className=\"p-0 h-auto text-yellow-800 dark:text-yellow-200 underline ml-1\"\n                    onClick={() => window.location.href = '/settings'}\n                    data-testid=\"link-settings\"\n                  >\n                    Állítsd be a beállításokban.\n                  </Button>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Chat Tips */}\n        <Card className=\"mt-4\">\n          <CardContent className=\"p-4\">\n            <h4 className=\"font-medium text-card-foreground mb-2\">💡 Tippek a hatékony chat használathoz:</h4>\n            <ul className=\"text-sm text-muted-foreground space-y-1\">\n              <li>• Légy konkrét a kérdéseidben</li>\n              <li>• Kérdezz tanulási módszerekről, technikákról</li>\n              <li>• Kérj magyarázatokat bonyolult témákhoz</li>\n              <li>• Használd a téma-specifikus chatot feltöltött anyagokhoz</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8714},"client/src/pages/Focus.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { api } from '@/services/api';\nimport useStore from '@/store/useStore';\nimport { focusDetector, FocusEvent } from '@/utils/focus-detector';\nimport { calculateXP } from '@/utils/spaced-repetition';\nimport { Play, Pause, RotateCcw, AlertTriangle, Clock } from 'lucide-react';\n\n// Preset durations in minutes\nconst PRESET_DURATIONS = [5, 15, 25, 45, 60];\n\nexport default function Focus() {\n  const [selectedDurationMinutes, setSelectedDurationMinutes] = useState(25);\n  const [customDurationInput, setCustomDurationInput] = useState('');\n  const [showCustomInput, setShowCustomInput] = useState(false);\n  \n  // Calculate focus duration in seconds based on selected duration\n  const focusDuration = selectedDurationMinutes * 60;\n  const [timeLeft, setTimeLeft] = useState(focusDuration);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [focusInterruptions, setFocusInterruptions] = useState(0);\n  const [showCheatWarning, setShowCheatWarning] = useState(false);\n  const [showSessionEndModal, setShowSessionEndModal] = useState(false);\n  const [modalCardCount, setModalCardCount] = useState('');\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { focusState, setFocusState, resetFocus, focusAlerts } = useStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Create study session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: (data: any) => api.createStudySession(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/study-sessions'] });\n    }\n  });\n\n  // Add XP mutation (atomic)\n  const addXpMutation = useMutation({\n    mutationFn: (xpDelta: number) => api.addXp(xpDelta),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n    }\n  });\n\n  // Focus detection\n  useEffect(() => {\n    const unsubscribe = focusDetector.onFocusChange((event: FocusEvent) => {\n      if (!isRunning) return;\n      \n      // Don't count interruptions during UI dialogs (navigation confirmation, session end modal)\n      if (focusState.isUIDialogOpen || showSessionEndModal) {\n        return;\n      }\n\n      if (event.type === 'blur' || event.type === 'hidden' || event.type === 'idle') {\n        setFocusInterruptions(prev => prev + 1);\n        \n        if (focusAlerts) {\n          setShowCheatWarning(true);\n          toast({\n            title: \"Fókusz megszakadt!\",\n            description: \"Az oldal elhagyása vagy inaktivitás miatt a fókusz megszakadt.\",\n            variant: \"destructive\"\n          });\n        }\n\n        // Hide warning after 3 seconds\n        setTimeout(() => setShowCheatWarning(false), 3000);\n      }\n    });\n\n    return unsubscribe;\n  }, [isRunning, focusAlerts, toast, focusState.isUIDialogOpen, showSessionEndModal]);\n\n  // Prevent page exit during focus session\n  useEffect(() => {\n    const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (focusState.isActive && isRunning) {\n        e.preventDefault();\n        e.returnValue = 'A fókusz munkamenet aktív! Biztosan elhagyja az oldalt? A munkamenet elvész.';\n        return 'A fókusz munkamenet aktív! Biztosan elhagyja az oldalt? A munkamenet elvész.';\n      }\n    };\n\n    if (focusState.isActive && isRunning) {\n      window.addEventListener('beforeunload', handleBeforeUnload);\n    }\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [focusState.isActive, isRunning]);\n\n  // Timer logic\n  useEffect(() => {\n    if (isRunning && timeLeft > 0) {\n      intervalRef.current = setInterval(() => {\n        setTimeLeft(prev => {\n          if (prev <= 1) {\n            setIsRunning(false);\n            setIsComplete(true);\n            handleTimerComplete();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning, timeLeft]);\n\n  const handleTimerComplete = () => {\n    // Show modal for card count input\n    setShowSessionEndModal(true);\n    setFocusState({ isUIDialogOpen: true }); // Signal that session end modal is open\n  };\n\n  const handleSessionEnd = async () => {\n    const focusMinutes = Math.floor((focusDuration - timeLeft) / 60);\n    const wasInterrupted = focusInterruptions > 0;\n    const correctCards = parseInt(modalCardCount) || 0;\n    const xp = calculateXP(focusMinutes, correctCards, wasInterrupted);\n\n    // Save study session\n    await createSessionMutation.mutateAsync({\n      type: 'focus',\n      duration: focusMinutes,\n      xpEarned: xp,\n      cardsStudied: correctCards,\n      correctCards,\n      focusInterrupted: wasInterrupted,\n    });\n\n    // Add XP atomically (no hardcoded values)\n    await addXpMutation.mutateAsync(xp);\n\n    toast({\n      title: \"Fókusz munkamenet befejezve!\",\n      description: `${focusMinutes} perc fókusz időt teljesítettél. ${correctCards} kártyával. +${xp} XP szerzett!`,\n    });\n\n    setFocusState({\n      isActive: false,\n      startTime: null,\n      pausedTime: 0,\n      interruptions: focusInterruptions,\n    });\n    \n    setShowSessionEndModal(false);\n    setFocusState({ isUIDialogOpen: false }); // Clear dialog flag\n    setIsComplete(true);\n  };\n\n  const startTimer = () => {\n    setIsRunning(true);\n    setFocusState({\n      isActive: true,\n      startTime: new Date(),\n      lastActivity: new Date(),\n    });\n    \n    // Show soft lock notification\n    toast({\n      title: \"Fókusz mód aktiválva\",\n      description: \"A navigáció korlátozva a munkamenet alatt. Maradj fókuszban!\",\n    });\n  };\n\n  const pauseTimer = () => {\n    setIsRunning(false);\n    setFocusState({\n      isActive: false,\n      pausedTime: focusState.pausedTime + 1,\n    });\n  };\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTimeLeft(focusDuration);\n    setIsComplete(false);\n    setFocusInterruptions(0);\n    setShowCheatWarning(false);\n    setModalCardCount('');\n    setShowSessionEndModal(false);\n    setFocusState({ isUIDialogOpen: false }); // Clear dialog flag on reset\n    resetFocus();\n    \n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  // Update timer when duration changes\n  useEffect(() => {\n    if (!isRunning && !isComplete) {\n      setTimeLeft(focusDuration);\n    }\n  }, [focusDuration, isRunning, isComplete]);\n\n  const handlePresetSelect = (minutes: number) => {\n    if (isRunning) return; // Don't change duration while running\n    setSelectedDurationMinutes(minutes);\n    setShowCustomInput(false);\n    setCustomDurationInput('');\n  };\n\n  const handleCustomDuration = () => {\n    const customMinutes = parseInt(customDurationInput);\n    if (customMinutes && customMinutes >= 1 && customMinutes <= 120) {\n      setSelectedDurationMinutes(customMinutes);\n      setShowCustomInput(false);\n      setCustomDurationInput('');\n    }\n  };\n\n  const handleCustomInputKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCustomDuration();\n    }\n    if (e.key === 'Escape') {\n      setShowCustomInput(false);\n      setCustomDurationInput('');\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const progressPercentage = ((focusDuration - timeLeft) / focusDuration) * 100;\n  const circumference = 2 * Math.PI * 112;\n  const strokeDashoffset = circumference - (progressPercentage / 100) * circumference;\n\n  const expectedXP = calculateXP(\n    Math.floor((focusDuration - timeLeft) / 60), \n    0, // Cards will be entered at end\n    focusInterruptions > 0\n  );\n\n  return (\n    <div>\n      <div className=\"mb-8 text-center\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Fókusz mód</h1>\n        <p className=\"text-muted-foreground\">Állítható Pomodoro timer XP szerzéssel</p>\n      </div>\n\n      {/* Duration Selector */}\n      <div className=\"max-w-2xl mx-auto mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-2 flex items-center justify-center\">\n                <Clock className=\"w-5 h-5 mr-2\" />\n                Munkamenet hossza\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">Válassz előre beállított időt vagy adj meg saját értéket (1-120 perc)</p>\n            </div>\n            \n            {/* Preset Buttons */}\n            <div className=\"flex flex-wrap justify-center gap-2 mb-4\">\n              {PRESET_DURATIONS.map((minutes) => (\n                <Button\n                  key={minutes}\n                  variant={selectedDurationMinutes === minutes ? 'default' : 'outline'}\n                  size=\"sm\"\n                  onClick={() => handlePresetSelect(minutes)}\n                  disabled={isRunning}\n                  className=\"min-w-16\"\n                  data-testid={`preset-${minutes}`}\n                >\n                  {minutes}p\n                </Button>\n              ))}\n              <Button\n                variant={showCustomInput ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => {\n                  if (!isRunning) {\n                    setShowCustomInput(!showCustomInput);\n                    if (!showCustomInput) {\n                      setCustomDurationInput(selectedDurationMinutes.toString());\n                    }\n                  }\n                }}\n                disabled={isRunning}\n                data-testid=\"button-custom\"\n              >\n                Egyéni\n              </Button>\n            </div>\n\n            {/* Custom Input */}\n            {showCustomInput && (\n              <div className=\"flex items-center justify-center gap-2\">\n                <Input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"120\"\n                  value={customDurationInput}\n                  onChange={(e) => setCustomDurationInput(e.target.value)}\n                  onKeyDown={handleCustomInputKeyPress}\n                  placeholder=\"1-120 perc\"\n                  className=\"w-24 text-center\"\n                  data-testid=\"input-custom-duration\"\n                  autoFocus\n                />\n                <Button\n                  size=\"sm\"\n                  onClick={handleCustomDuration}\n                  disabled={!customDurationInput || parseInt(customDurationInput) < 1 || parseInt(customDurationInput) > 120}\n                  data-testid=\"button-apply-custom\"\n                >\n                  Alkalmaz\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowCustomInput(false);\n                    setCustomDurationInput('');\n                  }}\n                  data-testid=\"button-cancel-custom\"\n                >\n                  Mégse\n                </Button>\n              </div>\n            )}\n            \n            {/* Selected Duration Display */}\n            <div className=\"text-center mt-4\">\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"selected-duration\">\n                {selectedDurationMinutes} perc\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {isRunning ? 'Munkamenet fut...' : 'Kész az indításra'}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"max-w-md mx-auto text-center\">\n        {/* Circular Progress */}\n        <div className=\"relative mb-8\">\n          <svg className=\"progress-ring w-64 h-64 mx-auto transform -rotate-90\" width=\"256\" height=\"256\">\n            <circle\n              className=\"text-muted stroke-current\"\n              strokeWidth=\"8\"\n              fill=\"transparent\"\n              r=\"112\"\n              cx=\"128\"\n              cy=\"128\"\n            />\n            <circle\n              className=\"text-primary stroke-current progress-ring-circle\"\n              strokeWidth=\"8\"\n              fill=\"transparent\"\n              r=\"112\"\n              cx=\"128\"\n              cy=\"128\"\n              strokeDasharray={circumference}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinecap=\"round\"\n              style={{ transition: 'stroke-dashoffset 0.35s' }}\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-foreground\" data-testid=\"timer-display\">\n                {formatTime(timeLeft)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\" data-testid=\"timer-status\">\n                {isComplete ? 'Befejezve!' : isRunning ? 'Futó' : 'Kész az indításra'}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Control Buttons */}\n        <div className=\"flex justify-center space-x-4 mb-8\">\n          <Button\n            onClick={isRunning ? pauseTimer : startTimer}\n            disabled={isComplete}\n            className=\"px-6 py-3\"\n            data-testid=\"button-start-pause\"\n          >\n            {isRunning ? (\n              <>\n                <Pause className=\"w-5 h-5 mr-2\" />\n                Szünet\n              </>\n            ) : (\n              <>\n                <Play className=\"w-5 h-5 mr-2\" />\n                {timeLeft === focusDuration ? 'Indítás' : 'Folytatás'}\n              </>\n            )}\n          </Button>\n          <Button\n            onClick={resetTimer}\n            variant=\"secondary\"\n            className=\"px-6 py-3\"\n            data-testid=\"button-reset\"\n          >\n            <RotateCcw className=\"w-5 h-5 mr-2\" />\n            Újra\n          </Button>\n        </div>\n\n        {/* Focus Status */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Fókusz állapot</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Fókusz megtartva:</span>\n                <span \n                  className={`font-semibold ${\n                    focusInterruptions === 0 ? 'text-green-600' : 'text-destructive'\n                  }`}\n                  data-testid=\"focus-status\"\n                >\n                  {focusInterruptions === 0 ? '✓ Aktív' : `${focusInterruptions} megszakítás`}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Tanult kártyák:</span>\n                <span className=\"font-semibold text-muted-foreground\" data-testid=\"cards-note\">\n                  A végén kérjük meg\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Várható XP:</span>\n                <span className=\"font-semibold text-primary\" data-testid=\"expected-xp\">\n                  {expectedXP}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* XP Calculation Info */}\n        <Card className=\"mb-6 bg-muted/50\">\n          <CardContent className=\"p-4\">\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              <strong>XP számítás:</strong>\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Fókusz perc × 2 + Kártyák × 5\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              A fókusz megszakadása csökkenti az XP-t\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Anti-cheat Warning */}\n        {showCheatWarning && (\n          <Card className=\"border-destructive/20 bg-destructive/10\" data-testid=\"cheat-warning\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center text-destructive\">\n                <AlertTriangle className=\"w-5 h-5 mr-2\" />\n                <span className=\"text-sm font-medium\">Fókusz megszakadt!</span>\n              </div>\n              <p className=\"text-sm text-destructive/80 mt-1\">\n                Az oldal elhagyása vagy inaktivitás miatt az XP csökkent.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Session Complete Message */}\n        {isComplete && (\n          <Card className=\"border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-900/20\" data-testid=\"session-complete\">\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-2\">🎉</div>\n                <h4 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n                  Fókusz munkamenet befejezve!\n                </h4>\n                <p className=\"text-sm text-green-700 dark:text-green-300\">\n                  Munkamenet sikeresen befejezve!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Session End Modal */}\n      <Dialog open={showSessionEndModal} onOpenChange={() => {}}>\n        <DialogContent className=\"sm:max-w-md\" data-testid=\"session-end-modal\">\n          <DialogHeader>\n            <DialogTitle>Fókusz munkamenet befejezve! 🎉</DialogTitle>\n            <DialogDescription>\n              Hány kártyát tanultál a munkamenet során?\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"cardCount\">Tanult kártyák száma</Label>\n              <Input\n                id=\"cardCount\"\n                type=\"number\"\n                min=\"0\"\n                max=\"999\"\n                value={modalCardCount}\n                onChange={(e) => setModalCardCount(e.target.value)}\n                placeholder=\"pl. 15\"\n                data-testid=\"input-card-count\"\n                autoFocus\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => {\n                setModalCardCount('0');\n                handleSessionEnd();\n              }}\n              data-testid=\"button-skip-cards\"\n            >\n              Kihagyás (0 kártya)\n            </Button>\n            <Button\n              onClick={handleSessionEnd}\n              disabled={!modalCardCount || parseInt(modalCardCount) < 0}\n              data-testid=\"button-confirm-cards\"\n            >\n              Munkamenet befejezése\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19732},"client/src/pages/Functions.tsx":{"content":"import { useLocation } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { \n  Upload, \n  Layers, \n  MessageCircle, \n  Clock, \n  TrendingUp, \n  Settings \n} from 'lucide-react';\n\nexport default function Functions() {\n  const [, navigate] = useLocation();\n\n  const functions = [\n    {\n      title: 'Feltöltés & Szövegbevitel',\n      description: 'Szöveg beillesztése vagy fájl feltöltése PDF/kép formátumban',\n      icon: Upload,\n      route: '/upload',\n      testId: 'function-upload'\n    },\n    {\n      title: 'Kártyák',\n      description: 'Intelligens kártyák tanulása ismétlési algoritmussal',\n      icon: Layers,\n      route: '/cards',\n      testId: 'function-cards'\n    },\n    {\n      title: 'AI Chat',\n      description: 'Kérdezz bármit az AI tanári asszisztenstől',\n      icon: MessageCircle,\n      route: '/chat',\n      testId: 'function-chat'\n    },\n    {\n      title: 'Fókusz mód',\n      description: '25 perces Pomodoro timer XP számítással',\n      icon: Clock,\n      route: '/focus',\n      testId: 'function-focus'\n    },\n    {\n      title: 'Haladás',\n      description: 'Napi aktivitás és tanulási statisztikák',\n      icon: TrendingUp,\n      route: '/progress',\n      testId: 'function-progress'\n    },\n    {\n      title: 'Beállítások',\n      description: 'OpenAI API kulcs és egyéb beállítások',\n      icon: Settings,\n      route: '/settings',\n      testId: 'function-settings'\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Funkciók</h1>\n        <p className=\"text-muted-foreground\">Válassz egy funkciót a tanulás megkezdéséhez</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {functions.map((func) => (\n          <Card\n            key={func.title}\n            className=\"hover:shadow-lg transition-shadow cursor-pointer group\"\n            onClick={() => navigate(func.route)}\n            data-testid={func.testId}\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"bg-primary/10 p-3 rounded-lg group-hover:bg-primary/20 transition-colors\">\n                  <func.icon className=\"w-6 h-6 text-primary\" />\n                </div>\n                <h3 className=\"ml-3 text-lg font-semibold text-card-foreground\">{func.title}</h3>\n              </div>\n              <p className=\"text-muted-foreground\">{func.description}</p>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2623},"client/src/pages/Progress.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { api } from '@/services/api';\nimport { getAnimalForXP } from '@/utils/spaced-repetition';\nimport type { StudySession, Material, Flashcard } from '@shared/schema';\nimport { \n  Trophy, \n  Layers, \n  Clock, \n  Book, \n  Calculator, \n  Upload\n} from 'lucide-react';\nimport { ANIMALS } from '@/utils/spaced-repetition';\n\nexport default function ProgressPage() {\n  // Query for user data\n  const { data: user, isLoading: userLoading } = useQuery({\n    queryKey: ['/api/user'],\n  }) as { data: { xp: number } | undefined; isLoading: boolean };\n\n  // Query for study sessions\n  const { data: sessions = [], isLoading: sessionsLoading } = useQuery({\n    queryKey: ['/api/study-sessions'],\n  }) as { data: StudySession[]; isLoading: boolean };\n\n  // Query for materials\n  const { data: materials = [] } = useQuery({\n    queryKey: ['/api/materials'],\n  }) as { data: Material[] };\n\n  // Query for flashcards\n  const { data: flashcards = [] } = useQuery({\n    queryKey: ['/api/flashcards'],\n  }) as { data: Flashcard[] };\n\n  if (userLoading || sessionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Haladás betöltése...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Calculate total XP from local session data first\n  const localTotalXP = sessions.reduce((sum: number, session: StudySession) => sum + (session.xpEarned || 0), 0);\n  const displayXP = localTotalXP > 0 ? localTotalXP : (user?.xp || 0);\n\n  const currentAnimal = getAnimalForXP(displayXP);\n  const xpProgress = currentAnimal.nextXP \n    ? ((displayXP - currentAnimal.minXP) / (currentAnimal.nextXP - currentAnimal.minXP)) * 100\n    : 0;\n\n  // Calculate weekly stats from sessions (last 7 days)\n  const weekStart = new Date();\n  weekStart.setDate(weekStart.getDate() - 6);\n  weekStart.setHours(0, 0, 0, 0);\n  \n  const weeklySessionsOnly = sessions.filter((session: StudySession) => {\n    if (!session.createdAt) return false;\n    const sessionDate = new Date(session.createdAt);\n    return sessionDate >= weekStart;\n  });\n  \n  const weeklyStats = {\n    totalMinutes: weeklySessionsOnly.reduce((sum: number, session: StudySession) => sum + (session.duration || 0), 0),\n    cardsStudied: weeklySessionsOnly.reduce((sum: number, session: StudySession) => sum + (session.cardsStudied || 0), 0),\n    focusSessions: weeklySessionsOnly.filter((s: StudySession) => s.type === 'focus').length,\n    totalXP: weeklySessionsOnly.reduce((sum: number, session: StudySession) => sum + (session.xpEarned || 0), 0),\n  };\n\n  // Calculate real daily activity from sessions (last 7 days)\n  const today = new Date();\n  const last7Days = Array.from({ length: 7 }, (_, i) => {\n    const date = new Date(today);\n    date.setDate(today.getDate() - (6 - i));\n    return date;\n  });\n  \n  const dayLabels = ['H', 'K', 'Sz', 'Cs', 'P', 'Szo', 'V'];\n  const dayNames = ['Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat', 'Vasárnap'];\n  \n  const dailyActivity = last7Days.map((date, index) => {\n    const dayStart = new Date(date);\n    dayStart.setHours(0, 0, 0, 0);\n    const dayEnd = new Date(date);\n    dayEnd.setHours(23, 59, 59, 999);\n    \n    const dayMinutes = sessions\n      .filter((session: StudySession) => {\n        if (!session.createdAt) return false;\n        const sessionDate = new Date(session.createdAt);\n        return sessionDate >= dayStart && sessionDate <= dayEnd;\n      })\n      .reduce((sum: number, session: StudySession) => sum + (session.duration || 0), 0);\n    \n    return {\n      day: dayLabels[date.getDay() === 0 ? 6 : date.getDay() - 1], // Convert Sunday=0 to our format\n      minutes: dayMinutes,\n      label: dayNames[date.getDay() === 0 ? 6 : date.getDay() - 1]\n    };\n  });\n\n  const maxMinutes = Math.max(1, ...dailyActivity.map(d => d.minutes)); // Guard against division by zero\n\n  // Calculate real achievements from actual user data\n  const totalCardsStudied = sessions.reduce((sum: number, session: StudySession) => \n    sum + (session.cardsStudied || 0), 0);\n  \n  const focusSessionCount = sessions.filter((s: StudySession) => s.type === 'focus').length;\n  \n  const studyStreak = (() => {\n    // Calculate consecutive days with study activity\n    let streak = 0;\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n    \n    for (let i = 0; i < 30; i++) {\n      const checkDate = new Date(today);\n      checkDate.setDate(today.getDate() - i);\n      checkDate.setHours(0, 0, 0, 0);\n      \n      const nextDay = new Date(checkDate);\n      nextDay.setHours(23, 59, 59, 999);\n      \n      const hasActivity = sessions.some((session: StudySession) => {\n        if (!session.createdAt) return false;\n        const sessionDate = new Date(session.createdAt);\n        return sessionDate >= checkDate && sessionDate <= nextDay;\n      });\n      \n      if (hasActivity) {\n        streak++;\n      } else if (i > 0) {\n        break; // Stop counting if we hit a day without activity (but allow today to be empty)\n      }\n    }\n    return streak;\n  })();\n  \n  const achievements = [\n    {\n      icon: Trophy,\n      name: 'Első hét',\n      description: '7 napon át tanultál',\n      earned: studyStreak >= 7,\n      color: studyStreak >= 7 ? 'text-yellow-600 dark:text-yellow-400' : 'text-gray-400'\n    },\n    {\n      icon: Layers,\n      name: 'Kártya mester',\n      description: '100 kártyát tanultál',\n      earned: totalCardsStudied >= 100,\n      color: totalCardsStudied >= 100 ? 'text-blue-600 dark:text-blue-400' : 'text-gray-400'\n    },\n    {\n      icon: Clock,\n      name: 'Fókusz bajnok',\n      description: '50 fókusz munkamenet',\n      earned: focusSessionCount >= 50,\n      color: focusSessionCount >= 50 ? 'text-purple-600 dark:text-purple-400' : 'text-gray-400'\n    },\n  ];\n\n  // Calculate material mastery\n  const materialStats = materials.map((material: Material) => {\n    const materialCards = flashcards.filter((card: Flashcard) => card.materialId === material.id);\n    const masteredCards = materialCards.filter((card: Flashcard) => (card.correctCount || 0) > (card.incorrectCount || 0));\n    const masteryPercentage = materialCards.length > 0 ? Math.round((masteredCards.length / materialCards.length) * 100) : 0;\n    \n    return {\n      ...material,\n      cardCount: materialCards.length,\n      masteryPercentage,\n    };\n  });\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Haladás</h1>\n        <p className=\"text-muted-foreground\">A tanulási statisztikáid és fejlődésed</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Left Column: Stats */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Daily Activity */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Napi aktivitás</h3>\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {dailyActivity.map((day, index) => (\n                  <div key={index} className=\"text-center\" data-testid={`activity-${day.day}-${index}`}>\n                    <div className=\"text-xs text-muted-foreground mb-1\">{day.day}</div>\n                    <div className=\"bg-primary/20 rounded h-8 flex items-end justify-center\">\n                      <div \n                        className=\"bg-primary rounded w-full transition-all duration-300\" \n                        style={{ height: `${(day.minutes / maxMinutes) * 100}%` }}\n                        title={`${day.label}: ${day.minutes} perc`}\n                      ></div>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mt-1\">{day.minutes}p</div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Weekly Stats */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Heti statisztikák</h3>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\" data-testid=\"stat-minutes\">\n                  <div className=\"text-2xl font-bold text-primary\">{weeklyStats.totalMinutes}</div>\n                  <div className=\"text-sm text-muted-foreground\">Tanult perc</div>\n                </div>\n                <div className=\"text-center\" data-testid=\"stat-cards\">\n                  <div className=\"text-2xl font-bold text-primary\">{weeklyStats.cardsStudied}</div>\n                  <div className=\"text-sm text-muted-foreground\">Tanult kártya</div>\n                </div>\n                <div className=\"text-center\" data-testid=\"stat-sessions\">\n                  <div className=\"text-2xl font-bold text-primary\">{weeklyStats.focusSessions}</div>\n                  <div className=\"text-sm text-muted-foreground\">Fókusz munkamenet</div>\n                </div>\n                <div className=\"text-center\" data-testid=\"stat-xp\">\n                  <div className=\"text-2xl font-bold text-primary\">{displayXP}</div>\n                  <div className=\"text-sm text-muted-foreground\">Összes XP</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Legutóbbi aktivitás</h3>\n              <div className=\"space-y-3\" data-testid=\"recent-activities\">\n                {sessions.slice(0, 5).map((session: StudySession, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <div className=\"bg-primary/10 p-2 rounded-full\">\n                      {session.type === 'cards' && <Layers className=\"w-4 h-4 text-primary\" />}\n                      {session.type === 'focus' && <Clock className=\"w-4 h-4 text-primary\" />}\n                      {session.type === 'chat' && <Upload className=\"w-4 h-4 text-primary\" />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-card-foreground\">\n                        {session.type === 'cards' && `${session.cardsStudied || 0} kártyát tanultál`}\n                        {session.type === 'focus' && `${session.duration || 0} perces fókusz munkamenet befejezve`}\n                        {session.type === 'chat' && 'AI chat munkamenet'}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {session.createdAt ? new Date(session.createdAt).toLocaleDateString('hu-HU') : 'N/A'}\n                      </p>\n                    </div>\n                    <div className=\"text-sm font-semibold text-primary\">+{session.xpEarned || 0} XP</div>\n                  </div>\n                ))}\n                {sessions.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Clock className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p>Még nincs tanulási aktivitás</p>\n                    <p className=\"text-sm\">Kezdj el tanulni, hogy lásd a haladásodat!</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column: Level Progress */}\n        <div className=\"space-y-6\">\n          {/* Current Level */}\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Jelenlegi szint</h3>\n              \n              {/* Animal Avatar */}\n              <div className=\"bg-primary/10 w-24 h-24 rounded-full mx-auto mb-4 flex items-center justify-center\" data-testid=\"animal-avatar\">\n                <span className=\"text-4xl\" role=\"img\" aria-label={currentAnimal.name}>\n                  {currentAnimal.icon}\n                </span>\n              </div>\n              \n              <h4 className=\"text-xl font-bold text-card-foreground mb-2\" data-testid=\"current-level\">\n                {currentAnimal.name}\n              </h4>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                {currentAnimal.level}. szint\n              </p>\n              \n              {/* XP Progress */}\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">XP</span>\n                  <span className=\"text-card-foreground\" data-testid=\"xp-progress\">\n                    {displayXP}/{currentAnimal.nextXP || 100}\n                  </span>\n                </div>\n                <Progress value={xpProgress} className=\"h-3\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  {currentAnimal.nextXP ? Math.max(0, currentAnimal.nextXP - displayXP) : 0} XP a következő szintig\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Animal Progression */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Szintek</h3>\n              <div className=\"space-y-2\" data-testid=\"animal-progression\">\n                {ANIMALS.map((animal, index) => {\n                  const isUnlocked = displayXP >= animal.minXP;\n                  const isCurrent = currentAnimal.level === animal.level;\n                  \n                  return (\n                    <div \n                      key={index}\n                      className={`flex items-center space-x-3 p-2 rounded-lg transition-all ${\n                        isCurrent \n                          ? 'bg-primary/10 border border-primary/20' \n                          : isUnlocked \n                          ? 'bg-muted/50' \n                          : 'opacity-50'\n                      }`}\n                      data-testid={`animal-level-${animal.level}`}\n                    >\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        isUnlocked ? 'bg-primary/20' : 'bg-muted'\n                      }`}>\n                        <span className=\"text-lg\" role=\"img\" aria-label={animal.name}>\n                          {animal.icon}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className={`text-sm font-medium ${\n                          isUnlocked ? 'text-card-foreground' : 'text-muted-foreground'\n                        }`}>\n                          {animal.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {animal.minXP} XP{isCurrent ? ' (jelenlegi)' : ''}\n                        </p>\n                      </div>\n                      {isCurrent && (\n                        <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Achievements */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Eredmények</h3>\n              <div className=\"space-y-3\" data-testid=\"achievements\">\n                {achievements.map((achievement, index) => (\n                  <div \n                    key={index} \n                    className={`flex items-center space-x-3 ${!achievement.earned ? 'opacity-50' : ''}`}\n                  >\n                    <div className={`p-2 rounded-full ${\n                      achievement.earned \n                        ? 'bg-yellow-100 dark:bg-yellow-900/20' \n                        : 'bg-gray-100 dark:bg-gray-800'\n                    }`}>\n                      <achievement.icon className={`w-4 h-4 ${achievement.color}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium text-card-foreground\">{achievement.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{achievement.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Study Materials */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Tananyagok</h3>\n              <div className=\"space-y-3\" data-testid=\"study-materials\">\n                {materialStats.map((material: Material & { cardCount: number; masteryPercentage: number }, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-primary/10 p-2 rounded\">\n                        {material.type === 'text' && <Book className=\"w-4 h-4 text-primary\" />}\n                        {material.type === 'pdf' && <Book className=\"w-4 h-4 text-primary\" />}\n                        {material.type === 'image' && <Calculator className=\"w-4 h-4 text-primary\" />}\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-card-foreground truncate max-w-32\">\n                          {material.title}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {material.cardCount} kártya\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-semibold text-primary\">\n                        {material.masteryPercentage}%\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">elsajátítva</p>\n                    </div>\n                  </div>\n                ))}\n                {materials.length === 0 && (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <Book className=\"w-6 h-6 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Még nincs tananyag</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18884},"client/src/pages/Settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useTheme } from '@/components/ThemeProvider';\nimport { api } from '@/services/api';\nimport useStore from '@/store/useStore';\nimport { \n  Eye, \n  EyeOff, \n  Sun, \n  Moon, \n  Monitor, \n  Download, \n  Upload as UploadIcon, \n  Trash2,\n  Loader2,\n  CheckCircle,\n  XCircle\n} from 'lucide-react';\n\nexport default function Settings() {\n  const [showApiKey, setShowApiKey] = useState(false);\n  const [apiKeyInput, setApiKeyInput] = useState('');\n  const [isTestingKey, setIsTestingKey] = useState(false);\n  const [keyTestResult, setKeyTestResult] = useState<boolean | null>(null);\n\n  const { theme, setTheme } = useTheme();\n  const { \n    apiKey, \n    setApiKey, \n    accentColor, \n    setAccentColor, \n    focusAlerts, \n    setFocusAlerts,\n    dailyReminders,\n    setDailyReminders\n  } = useStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for settings\n  const { data: settings, isLoading } = useQuery({\n    queryKey: ['/api/settings'],\n    retry: false,\n  });\n\n  // Save settings mutation\n  const saveSettingsMutation = useMutation({\n    mutationFn: (data: any) => api.saveSettings(data),\n    onSuccess: () => {\n      toast({ title: \"Beállítások mentve!\", description: \"A beállításaid sikeresen frissítve lettek.\" });\n      queryClient.invalidateQueries({ queryKey: ['/api/settings'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Mentési hiba\",\n        description: error.message || \"Nem sikerült menteni a beállításokat.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Initialize API key input when settings load\n  useEffect(() => {\n    if (settings?.openaiApiKey && !apiKeyInput) {\n      setApiKeyInput(settings.openaiApiKey);\n      setApiKey(settings.openaiApiKey);\n    }\n  }, [settings, apiKeyInput, setApiKey]);\n\n  const handleSaveApiKey = async () => {\n    if (apiKeyInput.trim()) {\n      setApiKey(apiKeyInput.trim());\n      await saveSettingsMutation.mutateAsync({\n        openaiApiKey: apiKeyInput.trim(),\n      });\n    }\n  };\n\n  const handleTestApiKey = async () => {\n    if (!apiKeyInput.trim()) {\n      toast({ title: \"Hiba\", description: \"Kérlek add meg az API kulcsot!\", variant: \"destructive\" });\n      return;\n    }\n\n    setIsTestingKey(true);\n    setKeyTestResult(null);\n\n    try {\n      const result = await api.testApiKey(apiKeyInput.trim());\n      setKeyTestResult(result.success);\n      \n      if (result.success) {\n        toast({ title: \"API kulcs működik!\", description: \"A kapcsolat sikeresen létrejött.\" });\n      } else {\n        toast({ \n          title: \"API kulcs hiba\", \n          description: \"A kulcs nem érvényes vagy nincs internetkapcsolat.\",\n          variant: \"destructive\" \n        });\n      }\n    } catch (error) {\n      setKeyTestResult(false);\n      toast({ \n        title: \"Tesztelési hiba\", \n        description: \"Nem sikerült tesztelni az API kulcsot.\",\n        variant: \"destructive\" \n      });\n    } finally {\n      setIsTestingKey(false);\n    }\n  };\n\n  const handleThemeChange = async (newTheme: 'light' | 'dark' | 'auto') => {\n    setTheme(newTheme === 'auto' ? 'system' : newTheme);\n    await saveSettingsMutation.mutateAsync({\n      theme: newTheme,\n    });\n  };\n\n  const handleAccentColorChange = async (color: string) => {\n    setAccentColor(color);\n    await saveSettingsMutation.mutateAsync({\n      accentColor: color,\n    });\n  };\n\n  const handleToggleFocusAlerts = async (enabled: boolean) => {\n    setFocusAlerts(enabled);\n    await saveSettingsMutation.mutateAsync({\n      focusAlerts: enabled,\n    });\n  };\n\n  const handleToggleDailyReminders = async (enabled: boolean) => {\n    setDailyReminders(enabled);\n    await saveSettingsMutation.mutateAsync({\n      dailyReminders: enabled,\n    });\n  };\n\n\n  const handleExportData = () => {\n    const data = {\n      settings: useStore.getState(),\n      exportDate: new Date().toISOString(),\n      version: '1.0'\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `zap-backup-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({ title: \"Adatok exportálva!\", description: \"A biztonsági mentés letöltése megkezdődött.\" });\n  };\n\n  const handleImportData = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importedData = JSON.parse(e.target?.result as string);\n        \n        if (importedData.settings) {\n          // Restore settings from imported data\n          const { settings } = importedData;\n          if (settings.apiKey) setApiKey(settings.apiKey);\n          if (settings.accentColor) setAccentColor(settings.accentColor);\n          if (typeof settings.focusAlerts === 'boolean') setFocusAlerts(settings.focusAlerts);\n          if (typeof settings.dailyReminders === 'boolean') setDailyReminders(settings.dailyReminders);\n          \n          toast({ title: \"Adatok importálva!\", description: \"A beállítások sikeresen visszaállítva.\" });\n        }\n      } catch (error) {\n        toast({ \n          title: \"Import hiba\", \n          description: \"A fájl formátuma nem megfelelő.\",\n          variant: \"destructive\" \n        });\n      }\n    };\n    reader.readAsText(file);\n    event.target.value = '';\n  };\n\n  const handleClearAllData = () => {\n    if (window.confirm('Biztosan törölni szeretnéd az összes adatot? Ez a művelet visszavonhatatlan!')) {\n      // Clear local storage\n      localStorage.clear();\n      \n      // Reset store to defaults\n      setApiKey(null);\n      setAccentColor('blue');\n      setFocusAlerts(true);\n      setDailyReminders(false);\n      \n      toast({ \n        title: \"Adatok törölve!\", \n        description: \"Minden adat sikeresen törölve lett.\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Beállítások betöltése...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const accentColors = [\n    { name: 'Alap/Kék', value: 'blue', color: 'bg-blue-600' },\n    { name: 'Lila', value: 'purple', color: 'bg-purple-600' },\n    { name: 'Zöld', value: 'green', color: 'bg-green-600' },\n    { name: 'Borostyán', value: 'amber', color: 'bg-amber-500' },\n    { name: 'Indigo', value: 'indigo', color: 'bg-indigo-600' },\n  ];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Beállítások</h1>\n        <p className=\"text-muted-foreground\">API kulcsok és alkalmazás beállítások</p>\n      </div>\n\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        {/* OpenAI API Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">OpenAI API Beállítások</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"api-key\" className=\"text-sm font-medium text-card-foreground mb-2\">\n                  API Kulcs\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"api-key\"\n                    type={showApiKey ? 'text' : 'password'}\n                    placeholder=\"sk-...\"\n                    value={apiKeyInput}\n                    onChange={(e) => setApiKeyInput(e.target.value)}\n                    className=\"pr-12\"\n                    data-testid=\"input-api-key\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4\"\n                    onClick={() => setShowApiKey(!showApiKey)}\n                    data-testid=\"button-toggle-api-key\"\n                  >\n                    {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Az API kulcs biztonságosan tárolódik a böngésződben. \n                  <a \n                    href=\"https://platform.openai.com/api-keys\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\" \n                    className=\"text-primary hover:underline ml-1\"\n                  >\n                    Szerezz be egyet itt.\n                  </a>\n                </p>\n              </div>\n              \n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex space-x-2\">\n                  <Button\n                    onClick={handleSaveApiKey}\n                    disabled={saveSettingsMutation.isPending || !apiKeyInput.trim()}\n                    data-testid=\"button-save-api-key\"\n                  >\n                    {saveSettingsMutation.isPending ? (\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    ) : null}\n                    Kulcs mentése\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleTestApiKey}\n                    disabled={isTestingKey || !apiKeyInput.trim()}\n                    data-testid=\"button-test-api-key\"\n                  >\n                    {isTestingKey ? (\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    ) : null}\n                    Kulcs tesztelése\n                  </Button>\n                </div>\n                <div className=\"flex items-center text-sm\" data-testid=\"api-key-status\">\n                  {keyTestResult === true && (\n                    <>\n                      <CheckCircle className=\"w-4 h-4 text-green-600 mr-2\" />\n                      <span className=\"text-green-600\">Működik</span>\n                    </>\n                  )}\n                  {keyTestResult === false && (\n                    <>\n                      <XCircle className=\"w-4 h-4 text-destructive mr-2\" />\n                      <span className=\"text-destructive\">Hibás</span>\n                    </>\n                  )}\n                  {keyTestResult === null && !apiKey && (\n                    <>\n                      <div className=\"w-2 h-2 bg-destructive rounded-full mr-2\"></div>\n                      <span className=\"text-muted-foreground\">Nincs beállítva</span>\n                    </>\n                  )}\n                  {keyTestResult === null && apiKey && (\n                    <>\n                      <div className=\"w-2 h-2 bg-yellow-500 rounded-full mr-2\"></div>\n                      <span className=\"text-muted-foreground\">Nem tesztelve</span>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Theme Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Megjelenés</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium text-card-foreground mb-2\">Téma</Label>\n                <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                  <Button\n                    variant={theme === 'light' ? 'default' : 'outline'}\n                    className=\"p-3 flex flex-col items-center\"\n                    onClick={() => handleThemeChange('light')}\n                    data-testid=\"button-theme-light\"\n                  >\n                    <Sun className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Világos</span>\n                  </Button>\n                  <Button\n                    variant={theme === 'dark' ? 'default' : 'outline'}\n                    className=\"p-3 flex flex-col items-center\"\n                    onClick={() => handleThemeChange('dark')}\n                    data-testid=\"button-theme-dark\"\n                  >\n                    <Moon className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Sötét</span>\n                  </Button>\n                  <Button\n                    variant={theme === 'system' ? 'default' : 'outline'}\n                    className=\"p-3 flex flex-col items-center\"\n                    onClick={() => handleThemeChange('auto')}\n                    data-testid=\"button-theme-auto\"\n                  >\n                    <Monitor className=\"w-5 h-5 mb-1\" />\n                    <span className=\"text-xs\">Auto</span>\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-card-foreground mb-2\">Accent szín</Label>\n                <div className=\"grid grid-cols-6 gap-2 mt-2\">\n                  {accentColors.map((color) => (\n                    <Button\n                      key={color.value}\n                      variant=\"outline\"\n                      className={`w-8 h-8 p-0 rounded-lg ${color.color} ${\n                        accentColor === color.value ? 'ring-2 ring-primary ring-offset-2' : ''\n                      }`}\n                      onClick={() => handleAccentColorChange(color.value)}\n                      title={color.name}\n                      data-testid={`button-accent-${color.value}`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Learning Settings */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Tanulási beállítások</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\" data-testid=\"setting-focus-alerts\">\n                <div>\n                  <Label className=\"text-sm font-medium text-card-foreground\">Fókusz figyelmeztetések</Label>\n                  <p className=\"text-xs text-muted-foreground\">Értesítés fókusz megszakadásakor</p>\n                </div>\n                <Switch\n                  checked={focusAlerts}\n                  onCheckedChange={handleToggleFocusAlerts}\n                />\n              </div>\n\n              <div className=\"flex justify-between items-center\" data-testid=\"setting-daily-reminders\">\n                <div>\n                  <Label className=\"text-sm font-medium text-card-foreground\">Napi emlékeztetők</Label>\n                  <p className=\"text-xs text-muted-foreground\">Tanulási emlékeztetők küldése</p>\n                </div>\n                <Switch\n                  checked={dailyReminders}\n                  onCheckedChange={handleToggleDailyReminders}\n                />\n              </div>\n\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Data Management */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Adatok kezelése</h3>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={handleExportData}\n                  data-testid=\"button-export-data\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Adatok exportálása\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => document.getElementById('import-input')?.click()}\n                  data-testid=\"button-import-data\"\n                >\n                  <UploadIcon className=\"w-4 h-4 mr-2\" />\n                  Adatok importálása\n                </Button>\n                <input\n                  id=\"import-input\"\n                  type=\"file\"\n                  accept=\".json\"\n                  className=\"hidden\"\n                  onChange={handleImportData}\n                />\n              </div>\n              <div className=\"border-t border-border pt-4\">\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleClearAllData}\n                  className=\"w-full\"\n                  data-testid=\"button-clear-data\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Összes adat törlése\n                </Button>\n                <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                  Ez véglegesen törli az összes tanulási adatot és beállítást.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17733},"client/src/pages/Upload.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { api } from '@/services/api';\nimport useStore from '@/store/useStore';\nimport { Link } from 'wouter';\nimport { \n  FileText, \n  UploadCloud, \n  Send, \n  Loader2,\n  AlertTriangle,\n  Edit3\n} from 'lucide-react';\n\nexport default function Upload() {\n  const [text, setText] = useState('');\n  const [summary, setSummary] = useState('');\n  const [contextMessage, setContextMessage] = useState('');\n  const [currentMaterial, setCurrentMaterial] = useState<any>(null);\n  \n  const { apiKey, contextChatHistory, addContextChatMessage, setCurrentContext } = useStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for materials\n  const { data: materials = [] } = useQuery({\n    queryKey: ['/api/materials'],\n  });\n\n  // Generate summary mutation\n  const summaryMutation = useMutation({\n    mutationFn: (data: { text: string; apiKey?: string }) => api.generateSummary(data.text, data.apiKey),\n    onSuccess: (data) => {\n      setSummary(data.summary);\n      toast({ title: \"Összefoglaló elkészült!\", description: \"Az AI sikeresen létrehozta az összefoglalót.\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hiba történt\",\n        description: error.message || \"Nem sikerült az összefoglalót elkészíteni.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n\n  // Create material mutation\n  const createMaterialMutation = useMutation({\n    mutationFn: (data: { title: string; content: string; type: string; summary?: string }) => \n      api.createMaterial(data),\n    onSuccess: (material) => {\n      setCurrentMaterial(material);\n      setCurrentContext(material.content);\n      queryClient.invalidateQueries({ queryKey: ['/api/materials'] });\n    }\n  });\n\n\n  // Chat mutation\n  const chatMutation = useMutation({\n    mutationFn: (data: { message: string; context?: string; history?: any[]; apiKey?: string }) =>\n      api.sendChatMessage(data.message, data.context, data.history, data.apiKey),\n    onSuccess: (data) => {\n      addContextChatMessage({\n        role: 'assistant',\n        content: data.response,\n        timestamp: new Date()\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Chat hiba\",\n        description: error.message || \"Nem sikerült elküldeni az üzenetet.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGenerateSummary = () => {\n    if (!text.trim()) {\n      toast({ title: \"Hiba\", description: \"Kérlek adj meg szöveget!\", variant: \"destructive\" });\n      return;\n    }\n\n    if (!apiKey) {\n      toast({ \n        title: \"API kulcs hiányzik\", \n        description: \"Állítsd be az OpenAI API kulcsot a beállításokban!\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    summaryMutation.mutate({ text, apiKey });\n  };\n\n  const handleManualCardCreation = () => {\n    // Optionally save material if text exists, but don't block navigation\n    if (text.trim()) {\n      const title = text.substring(0, 50) + (text.length > 50 ? '...' : '');\n      createMaterialMutation.mutate({\n        title,\n        content: text,\n        type: 'text',\n        summary\n      });\n      \n      toast({ \n        title: \"Anyag mentve!\", \n        description: \"Most létrehozhatsz kártyákat manuálisan a Paklik oldalon.\"\n      });\n    }\n    // Navigation happens automatically via Link wrapper\n  };\n\n  const handleSaveMaterial = () => {\n    if (!text.trim()) {\n      toast({ title: \"Hiba\", description: \"Nincs mentendő szöveg!\", variant: \"destructive\" });\n      return;\n    }\n\n    const title = text.substring(0, 50) + (text.length > 50 ? '...' : '');\n    createMaterialMutation.mutate({\n      title,\n      content: text,\n      type: 'text',\n      summary\n    });\n  };\n\n\n  const handleSendContextMessage = () => {\n    if (!contextMessage.trim() || !currentMaterial) return;\n\n    if (!apiKey) {\n      toast({ \n        title: \"API kulcs hiányzik\", \n        description: \"Állítsd be az OpenAI API kulcsot a beállításokban!\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    addContextChatMessage({\n      role: 'user',\n      content: contextMessage,\n      timestamp: new Date()\n    });\n\n    chatMutation.mutate({\n      message: contextMessage,\n      context: currentMaterial.content,\n      history: contextChatHistory,\n      apiKey\n    });\n\n    setContextMessage('');\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // TODO: Implement OCR processing for PDF/images\n    toast({\n      title: \"Funkció fejlesztés alatt\",\n      description: \"A fájl feltöltés és OCR funkció hamarosan elérhető lesz.\",\n      variant: \"default\"\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">Feltöltés & Szövegbevitel</h1>\n        <p className=\"text-muted-foreground\">Illeszd be a szöveget vagy tölts fel fájlokat</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Text Input Section */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Szöveg beillesztése</h3>\n              <Textarea\n                placeholder=\"Illeszd be ide a tanulni kívánt szöveget...\"\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                className=\"min-h-64 resize-none\"\n                data-testid=\"input-text\"\n              />\n              \n              <div className=\"mt-4 flex flex-wrap gap-3\">\n                <Button\n                  onClick={handleGenerateSummary}\n                  disabled={summaryMutation.isPending || !text.trim()}\n                  data-testid=\"button-summary\"\n                >\n                  {summaryMutation.isPending ? (\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  ) : (\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Összefoglaló (AI szükséges)\n                </Button>\n                <Link href=\"/cards\">\n                  <Button\n                    onClick={handleManualCardCreation}\n                    data-testid=\"button-manual-cards\"\n                    variant=\"outline\"\n                  >\n                    <Edit3 className=\"w-4 h-4 mr-2\" />\n                    Kártyák kézi létrehozása\n                  </Button>\n                </Link>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* File Upload Section */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Fájl feltöltése</h3>\n              <div \n                className=\"border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary/50 transition-colors cursor-pointer\"\n                onClick={() => document.getElementById('file-input')?.click()}\n                data-testid=\"file-upload-area\"\n              >\n                <UploadCloud className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-2\">Húzd ide a fájlokat vagy kattints a tallózáshoz</p>\n                <p className=\"text-sm text-muted-foreground\">PDF, JPG, PNG fájlok támogatottak</p>\n                <Input\n                  id=\"file-input\"\n                  type=\"file\"\n                  className=\"hidden\"\n                  accept=\".pdf,.jpg,.jpeg,.png\"\n                  multiple\n                  onChange={handleFileUpload}\n                  data-testid=\"input-file\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Preview/Results Section */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Feldolgozott tartalom</h3>\n              <div className=\"space-y-4\">\n                {summary && (\n                  <div className=\"p-4 bg-muted rounded-md\" data-testid=\"summary-result\">\n                    <h4 className=\"font-medium text-card-foreground mb-2\">Összefoglaló</h4>\n                    <p className=\"text-muted-foreground text-sm\">{summary}</p>\n                  </div>\n                )}\n                \n\n                {!summary && (\n                  <div className=\"p-4 bg-muted/50 rounded-md text-center\">\n                    <p className=\"text-muted-foreground text-sm\">\n                      A feldolgozott tartalom itt fog megjelenni\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Context Chat */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Téma Chat</h3>\n              \n              {currentMaterial ? (\n                <>\n                  <div className=\"space-y-3 max-h-40 overflow-y-auto mb-4\" data-testid=\"context-chat-messages\">\n                    {contextChatHistory.map((message, index) => (\n                      <div key={index} className=\"text-sm\">\n                        <div className={`p-2 rounded ${\n                          message.role === 'user' \n                            ? 'bg-primary text-primary-foreground ml-8' \n                            : 'bg-muted mr-8'\n                        }`}>\n                          <strong>{message.role === 'user' ? 'Te:' : 'AI:'}</strong> {message.content}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"flex\">\n                    <Input\n                      placeholder=\"Kérdezz erről az anyagról...\"\n                      value={contextMessage}\n                      onChange={(e) => setContextMessage(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleSendContextMessage()}\n                      className=\"flex-1\"\n                      data-testid=\"input-context-message\"\n                    />\n                    <Button\n                      onClick={handleSendContextMessage}\n                      disabled={chatMutation.isPending || !contextMessage.trim()}\n                      className=\"ml-2\"\n                      data-testid=\"button-send-context\"\n                    >\n                      {chatMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                      ) : (\n                        <Send className=\"w-4 h-4\" />\n                      )}\n                    </Button>\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground mb-4\">\n                    Először mentsd el az anyagot a téma-specifikus chat használatához\n                  </p>\n                  <Button\n                    onClick={handleSaveMaterial}\n                    disabled={!text.trim() || createMaterialMutation.isPending}\n                    data-testid=\"button-save-material\"\n                  >\n                    {createMaterialMutation.isPending ? (\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    ) : null}\n                    Anyag mentése\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* API Key Warning */}\n          {!apiKey && (\n            <Card className=\"border-yellow-200 dark:border-yellow-800 bg-yellow-50 dark:bg-yellow-900/20\" data-testid=\"api-key-warning\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mr-2\" />\n                  <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                    Az AI funkciók működéséhez OpenAI API kulcs szükséges. \n                    <Link href=\"/settings\">\n                      <Button variant=\"link\" className=\"p-0 h-auto text-yellow-800 dark:text-yellow-200 underline ml-1\">\n                        Állítsd be a beállításokban.\n                      </Button>\n                    </Link>\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12973},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"import { apiRequest } from '@/lib/queryClient';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nexport const api = {\n  // Materials\n  async getMaterials() {\n    const response = await apiRequest('GET', '/api/materials');\n    return response.json();\n  },\n\n  async getMaterial(id: string) {\n    const response = await apiRequest('GET', `/api/materials/${id}`);\n    return response.json();\n  },\n\n  async createMaterial(data: { title: string; content: string; type: string; summary?: string }) {\n    const response = await apiRequest('POST', '/api/materials', data);\n    return response.json();\n  },\n\n  // AI Processing\n  async generateSummary(text: string, apiKey?: string) {\n    const response = await apiRequest('POST', '/api/ai/summary', { text, apiKey });\n    return response.json();\n  },\n\n  async generateFlashcards(text: string, apiKey?: string) {\n    const response = await apiRequest('POST', '/api/ai/flashcards', { text, apiKey });\n    return response.json();\n  },\n\n  async sendChatMessage(\n    message: string, \n    context?: string, \n    history?: ChatMessage[], \n    apiKey?: string\n  ) {\n    const response = await apiRequest('POST', '/api/ai/chat', {\n      message,\n      context,\n      history,\n      apiKey\n    });\n    return response.json();\n  },\n\n  async testApiKey(apiKey: string) {\n    const response = await apiRequest('POST', '/api/ai/test', { apiKey });\n    return response.json();\n  },\n\n  // Flashcards\n  async getFlashcards() {\n    const response = await apiRequest('GET', '/api/flashcards');\n    return response.json();\n  },\n\n  async getFlashcardsForReview() {\n    const response = await apiRequest('GET', '/api/flashcards/review');\n    return response.json();\n  },\n\n  async createFlashcard(data: {\n    materialId?: string;\n    question: string;\n    answer: string;\n    difficulty?: number;\n    nextReview?: Date;\n  }) {\n    const response = await apiRequest('POST', '/api/flashcards', data);\n    return response.json();\n  },\n\n  async updateFlashcard(id: string, data: Partial<{\n    difficulty: number;\n    nextReview: Date;\n    lastReviewed: Date;\n    correctCount: number;\n    incorrectCount: number;\n  }>) {\n    const response = await apiRequest('PATCH', `/api/flashcards/${id}`, data);\n    return response.json();\n  },\n\n  // Study Sessions\n  async getStudySessions() {\n    const response = await apiRequest('GET', '/api/study-sessions');\n    return response.json();\n  },\n\n  async createStudySession(data: {\n    type: string;\n    duration?: number;\n    xpEarned?: number;\n    cardsStudied?: number;\n    correctCards?: number;\n    focusInterrupted?: boolean;\n  }) {\n    const response = await apiRequest('POST', '/api/study-sessions', data);\n    return response.json();\n  },\n\n  // Settings\n  async getSettings() {\n    const response = await apiRequest('GET', '/api/settings');\n    return response.json();\n  },\n\n  async saveSettings(data: {\n    openaiApiKey?: string;\n    theme?: string;\n    accentColor?: string;\n    focusAlerts?: boolean;\n    dailyReminders?: boolean;\n    cardDifficulty?: string;\n  }) {\n    const response = await apiRequest('POST', '/api/settings', data);\n    return response.json();\n  },\n\n  // User\n  async getUser() {\n    const response = await apiRequest('GET', '/api/user');\n    return response.json();\n  },\n\n  async updateUser(data: Partial<{\n    xp: number;\n    level: number;\n    currentAnimal: string;\n  }>) {\n    const response = await apiRequest('PATCH', '/api/user', data);\n    return response.json();\n  },\n\n  // Add XP atomically (fixes hardcoded XP issues)\n  async addXp(xpDelta: number) {\n    const response = await apiRequest('POST', '/api/user/add-xp', { xpDelta });\n    return response.json();\n  },\n};\n","size_bytes":3700},"client/src/store/useStore.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface ChatMessage {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface FocusState {\n  isActive: boolean;\n  startTime: Date | null;\n  pausedTime: number;\n  interruptions: number;\n  lastActivity: Date;\n  isUIDialogOpen: boolean;\n}\n\ninterface FlashcardSession {\n  cards: any[];\n  currentIndex: number;\n  correctCount: number;\n  incorrectCount: number;\n  sessionStartTime: Date | null;\n}\n\ninterface AppState {\n  // Theme\n  theme: 'light' | 'dark' | 'auto';\n  accentColor: string;\n  \n  // Chat\n  globalChatHistory: ChatMessage[];\n  contextChatHistory: ChatMessage[];\n  currentContext: string | null;\n  \n  // Focus\n  focusState: FocusState;\n  \n  // Flashcards\n  flashcardSession: FlashcardSession;\n  \n  // Settings\n  apiKey: string | null;\n  focusAlerts: boolean;\n  dailyReminders: boolean;\n  cardDifficulty: string;\n  \n  // Actions\n  setTheme: (theme: 'light' | 'dark' | 'auto') => void;\n  setAccentColor: (color: string) => void;\n  addGlobalChatMessage: (message: ChatMessage) => void;\n  addContextChatMessage: (message: ChatMessage) => void;\n  setCurrentContext: (context: string | null) => void;\n  clearGlobalChat: () => void;\n  clearContextChat: () => void;\n  setFocusState: (state: Partial<FocusState>) => void;\n  resetFocus: () => void;\n  setFlashcardSession: (session: Partial<FlashcardSession>) => void;\n  resetFlashcardSession: () => void;\n  setApiKey: (key: string | null) => void;\n  setFocusAlerts: (enabled: boolean) => void;\n  setDailyReminders: (enabled: boolean) => void;\n  setCardDifficulty: (difficulty: string) => void;\n}\n\nconst useStore = create<AppState>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      theme: 'light',\n      accentColor: 'blue',\n      globalChatHistory: [],\n      contextChatHistory: [],\n      currentContext: null,\n      focusState: {\n        isActive: false,\n        startTime: null,\n        pausedTime: 0,\n        interruptions: 0,\n        lastActivity: new Date(),\n        isUIDialogOpen: false,\n      },\n      flashcardSession: {\n        cards: [],\n        currentIndex: 0,\n        correctCount: 0,\n        incorrectCount: 0,\n        sessionStartTime: null,\n      },\n      apiKey: null,\n      focusAlerts: true,\n      dailyReminders: false,\n      cardDifficulty: 'medium',\n\n      // Actions\n      setTheme: (theme) => set({ theme }),\n      setAccentColor: (color) => set({ accentColor: color }),\n      \n      addGlobalChatMessage: (message) => \n        set((state) => ({\n          globalChatHistory: [...state.globalChatHistory, message]\n        })),\n      \n      addContextChatMessage: (message) => \n        set((state) => ({\n          contextChatHistory: [...state.contextChatHistory, message]\n        })),\n      \n      setCurrentContext: (context) => set({ currentContext: context }),\n      \n      clearGlobalChat: () => set({ globalChatHistory: [] }),\n      clearContextChat: () => set({ contextChatHistory: [] }),\n      \n      setFocusState: (newState) => \n        set((state) => ({\n          focusState: { ...state.focusState, ...newState }\n        })),\n      \n      resetFocus: () => \n        set({\n          focusState: {\n            isActive: false,\n            startTime: null,\n            pausedTime: 0,\n            interruptions: 0,\n            lastActivity: new Date(),\n            isUIDialogOpen: false,\n          }\n        }),\n      \n      setFlashcardSession: (newSession) => \n        set((state) => ({\n          flashcardSession: { ...state.flashcardSession, ...newSession }\n        })),\n      \n      resetFlashcardSession: () => \n        set({\n          flashcardSession: {\n            cards: [],\n            currentIndex: 0,\n            correctCount: 0,\n            incorrectCount: 0,\n            sessionStartTime: null,\n          }\n        }),\n      \n      setApiKey: (key) => set({ apiKey: key }),\n      setFocusAlerts: (enabled) => set({ focusAlerts: enabled }),\n      setDailyReminders: (enabled) => set({ dailyReminders: enabled }),\n      setCardDifficulty: (difficulty) => set({ cardDifficulty: difficulty }),\n    }),\n    {\n      name: 'zap-storage',\n      // Only persist certain parts of the state\n      partialize: (state) => ({\n        theme: state.theme,\n        accentColor: state.accentColor,\n        apiKey: state.apiKey,\n        focusAlerts: state.focusAlerts,\n        dailyReminders: state.dailyReminders,\n        cardDifficulty: state.cardDifficulty,\n        globalChatHistory: state.globalChatHistory,\n      }),\n    }\n  )\n);\n\nexport default useStore;\n","size_bytes":4556},"client/src/utils/focus-detector.ts":{"content":"// Focus detection utilities for anti-cheat in Pomodoro timer\n\nexport interface FocusEvent {\n  type: 'blur' | 'focus' | 'idle' | 'active' | 'visible' | 'hidden';\n  timestamp: Date;\n}\n\nexport class FocusDetector {\n  private listeners: ((event: FocusEvent) => void)[] = [];\n  private lastActivity: Date = new Date();\n  private idleThreshold: number = 10000; // 10 seconds\n  private idleTimer: NodeJS.Timeout | null = null;\n  private isIdle: boolean = false;\n\n  constructor() {\n    this.setupListeners();\n  }\n\n  private setupListeners() {\n    // Window focus/blur\n    window.addEventListener('focus', () => {\n      this.emit({ type: 'focus', timestamp: new Date() });\n    });\n\n    window.addEventListener('blur', () => {\n      this.emit({ type: 'blur', timestamp: new Date() });\n    });\n\n    // Page visibility\n    document.addEventListener('visibilitychange', () => {\n      const type = document.hidden ? 'hidden' : 'visible';\n      this.emit({ type, timestamp: new Date() });\n    });\n\n    // Activity detection (mouse, keyboard, touch)\n    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];\n    const handleActivity = () => {\n      this.updateActivity();\n    };\n\n    activityEvents.forEach(event => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    // Start idle detection\n    this.resetIdleTimer();\n  }\n\n  private emit(event: FocusEvent) {\n    this.listeners.forEach(listener => listener(event));\n  }\n\n  private updateActivity() {\n    this.lastActivity = new Date();\n    \n    if (this.isIdle) {\n      this.isIdle = false;\n      this.emit({ type: 'active', timestamp: new Date() });\n    }\n\n    this.resetIdleTimer();\n  }\n\n  private resetIdleTimer() {\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n    }\n\n    this.idleTimer = setTimeout(() => {\n      if (!this.isIdle) {\n        this.isIdle = true;\n        this.emit({ type: 'idle', timestamp: new Date() });\n      }\n    }, this.idleThreshold);\n  }\n\n  public onFocusChange(listener: (event: FocusEvent) => void): () => void {\n    this.listeners.push(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  public isCurrentlyFocused(): boolean {\n    return !document.hidden && document.hasFocus();\n  }\n\n  public getTimeSinceLastActivity(): number {\n    return Date.now() - this.lastActivity.getTime();\n  }\n\n  public destroy() {\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n    }\n    this.listeners = [];\n  }\n}\n\n// Singleton instance\nexport const focusDetector = new FocusDetector();\n","size_bytes":2681},"client/src/utils/spaced-repetition.ts":{"content":"// Simple spaced repetition algorithm based on SM-2\nexport interface CardReview {\n  correct: boolean;\n  difficulty: number; // 1-5 scale\n}\n\nexport function calculateNextReview(review: CardReview, previousInterval: number = 1, difficultyMultiplier: number = 1.0): {\n  nextInterval: number;\n  nextReviewDate: Date;\n  newDifficulty: number;\n} {\n  let { correct, difficulty } = review;\n  let interval = previousInterval;\n\n  if (correct) {\n    // Correct answer - increase interval\n    if (interval === 1) {\n      interval = 6; // 6 days for first correct review\n    } else {\n      interval = Math.ceil(interval * 2.5); // Exponential growth\n    }\n    \n    // Apply difficulty multiplier to interval\n    interval = Math.ceil(interval * difficultyMultiplier);\n    \n    // Slightly reduce difficulty for correct answers\n    difficulty = Math.max(1, difficulty - 0.1);\n  } else {\n    // Incorrect answer - reset to short interval (always 1 day regardless of multiplier)\n    interval = 1;\n    \n    // Increase difficulty for incorrect answers\n    difficulty = Math.min(5, difficulty + 0.5);\n  }\n\n  // Cap the maximum interval at 180 days\n  interval = Math.min(interval, 180);\n\n  const nextReviewDate = new Date();\n  nextReviewDate.setDate(nextReviewDate.getDate() + interval);\n\n  return {\n    nextInterval: interval,\n    nextReviewDate,\n    newDifficulty: difficulty,\n  };\n}\n\n// Sort cards by priority (overdue cards first, then by difficulty)\nexport function sortCardsByPriority(cards: any[]): any[] {\n  const now = new Date();\n  \n  return [...cards].sort((a, b) => {\n    const aOverdue = new Date(a.nextReview) <= now;\n    const bOverdue = new Date(b.nextReview) <= now;\n    \n    // Overdue cards first\n    if (aOverdue && !bOverdue) return -1;\n    if (!aOverdue && bOverdue) return 1;\n    \n    // Among overdue cards, prioritize by how overdue they are\n    if (aOverdue && bOverdue) {\n      const aDays = Math.floor((now.getTime() - new Date(a.nextReview).getTime()) / (1000 * 60 * 60 * 24));\n      const bDays = Math.floor((now.getTime() - new Date(b.nextReview).getTime()) / (1000 * 60 * 60 * 24));\n      return bDays - aDays; // Most overdue first\n    }\n    \n    // Among future cards, prioritize by difficulty (harder cards first)\n    return b.difficulty - a.difficulty;\n  });\n}\n\n// Calculate XP for a study session\nexport function calculateXP(focusMinutes: number, correctCards: number, focusInterrupted: boolean = false): number {\n  let xp = focusMinutes * 2 + correctCards * 5;\n  \n  // Reduce XP if focus was interrupted\n  if (focusInterrupted) {\n    xp = Math.floor(xp * 0.7);\n  }\n  \n  return Math.max(0, xp);\n}\n\n// Level progression system based on XP-based animal progression\nexport const ANIMALS = [\n  { level: 1, name: \"Hangya\", minXP: 0, icon: \"🐜\" },\n  { level: 2, name: \"Egér\", minXP: 101, icon: \"🐭\" },\n  { level: 3, name: \"Nyúl\", minXP: 301, icon: \"🐰\" },\n  { level: 4, name: \"Bagoly\", minXP: 701, icon: \"🦉\" },\n  { level: 5, name: \"Delfin\", minXP: 1201, icon: \"🐬\" },\n  { level: 6, name: \"Főnix\", minXP: 1801, icon: \"🔥\" },\n];\n\nexport function getAnimalForXP(xp: number): { level: number; name: string; minXP: number; nextXP?: number; icon: string } {\n  const currentAnimal = ANIMALS.slice().reverse().find(animal => xp >= animal.minXP) || ANIMALS[0];\n  const nextAnimal = ANIMALS.find(animal => animal.level > currentAnimal.level);\n  \n  return {\n    ...currentAnimal,\n    nextXP: nextAnimal?.minXP,\n  };\n}\n","size_bytes":3434},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/DeckManager.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, Plus, Edit3, Trash2, BookOpen, Save, X } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Deck, Flashcard } from '@shared/schema';\n\nexport default function DeckManager() {\n  const [, params] = useRoute('/cards/:deckId');\n  const deckId = params?.deckId;\n  \n  const [showNewCardForm, setShowNewCardForm] = useState(false);\n  const [newQuestion, setNewQuestion] = useState('');\n  const [newAnswer, setNewAnswer] = useState('');\n  const [editingCard, setEditingCard] = useState<Flashcard | null>(null);\n  const [editQuestion, setEditQuestion] = useState('');\n  const [editAnswer, setEditAnswer] = useState('');\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for deck details\n  const { data: deck, isLoading: deckLoading } = useQuery({\n    queryKey: [`/api/decks/${deckId}`],\n    enabled: !!deckId,\n    refetchOnWindowFocus: false,\n  }) as { data: Deck | undefined; isLoading: boolean };\n\n  // Query for deck cards\n  const { data: cards = [], isLoading: cardsLoading } = useQuery({\n    queryKey: [`/api/decks/${deckId}/cards`],\n    enabled: !!deckId,\n    refetchOnWindowFocus: false,\n  }) as { data: Flashcard[]; isLoading: boolean };\n\n  // Create card mutation\n  const createCardMutation = useMutation({\n    mutationFn: async (data: { question: string; answer: string }) => {\n      const response = await fetch('/api/flashcards', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...data,\n          deckId,\n          difficulty: 1,\n          nextReview: new Date(),\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to create card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/cards`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', 'with-stats'] });\n      setShowNewCardForm(false);\n      setNewQuestion('');\n      setNewAnswer('');\n      toast({\n        title: \"Kártya létrehozva!\",\n        description: \"Az új kártya sikeresen hozzáadva a paklihoz.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hiba!\",\n        description: \"Nem sikerült létrehozni a kártyát.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update card mutation\n  const updateCardMutation = useMutation({\n    mutationFn: async (data: { id: string; question: string; answer: string }) => {\n      const response = await fetch(`/api/flashcards/${data.id}`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          question: data.question,\n          answer: data.answer,\n        }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to update card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/cards`] });\n      setEditingCard(null);\n      setEditQuestion('');\n      setEditAnswer('');\n      toast({\n        title: \"Kártya frissítve!\",\n        description: \"A kártya sikeresen módosítva.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hiba!\",\n        description: \"Nem sikerült frissíteni a kártyát.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete card mutation\n  const deleteCardMutation = useMutation({\n    mutationFn: async (cardId: string) => {\n      const response = await fetch(`/api/flashcards/${cardId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/cards`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/decks', 'with-stats'] });\n      toast({\n        title: \"Kártya törölve!\",\n        description: \"A kártya sikeresen eltávolítva.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hiba!\",\n        description: \"Nem sikerült törölni a kártyát.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCreateCard = () => {\n    if (!newQuestion.trim() || !newAnswer.trim()) {\n      toast({\n        title: \"Hiba!\",\n        description: \"Mind a kérdés, mind a válasz megadása kötelező.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createCardMutation.mutate({\n      question: newQuestion.trim(),\n      answer: newAnswer.trim(),\n    });\n  };\n\n  const handleEditCard = (card: Flashcard) => {\n    setEditingCard(card);\n    setEditQuestion(card.question);\n    setEditAnswer(card.answer);\n  };\n\n  const handleUpdateCard = () => {\n    if (!editingCard || !editQuestion.trim() || !editAnswer.trim()) {\n      toast({\n        title: \"Hiba!\",\n        description: \"Mind a kérdés, mind a válasz megadása kötelező.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateCardMutation.mutate({\n      id: editingCard.id,\n      question: editQuestion.trim(),\n      answer: editAnswer.trim(),\n    });\n  };\n\n  const handleDeleteCard = (cardId: string) => {\n    if (confirm('Biztosan törölni szeretnéd ezt a kártyát?')) {\n      deleteCardMutation.mutate(cardId);\n    }\n  };\n\n  const cancelEdit = () => {\n    setEditingCard(null);\n    setEditQuestion('');\n    setEditAnswer('');\n  };\n\n  if (deckLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Pakli betöltése...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!deck) {\n    return (\n      <div className=\"text-center py-12\">\n        <h1 className=\"text-2xl font-bold mb-4\">Pakli nem található</h1>\n        <Link href=\"/cards\">\n          <Button variant=\"outline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Vissza a paklikhoz\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/cards\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-to-cards\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Vissza\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">{deck.name}</h1>\n            {deck.description && (\n              <p className=\"text-muted-foreground mt-1\">{deck.description}</p>\n            )}\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"secondary\" data-testid=\"card-count-badge\">\n            <BookOpen className=\"w-3 h-3 mr-1\" />\n            {cards.length} kártya\n          </Badge>\n          <Button\n            onClick={() => setShowNewCardForm(true)}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-add-card\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            Új kártya\n          </Button>\n        </div>\n      </div>\n\n      {/* New Card Form */}\n      {showNewCardForm && (\n        <Card className=\"border-primary/20\" data-testid=\"new-card-form\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Új kártya hozzáadása\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"new-question\" className=\"block text-sm font-medium mb-2\">\n                Kérdés *\n              </label>\n              <Textarea\n                id=\"new-question\"\n                placeholder=\"Írd ide a kérdést...\"\n                value={newQuestion}\n                onChange={(e) => setNewQuestion(e.target.value)}\n                data-testid=\"input-new-question\"\n                rows={2}\n              />\n            </div>\n            <div>\n              <label htmlFor=\"new-answer\" className=\"block text-sm font-medium mb-2\">\n                Válasz *\n              </label>\n              <Textarea\n                id=\"new-answer\"\n                placeholder=\"Írd ide a válasz...\"\n                value={newAnswer}\n                onChange={(e) => setNewAnswer(e.target.value)}\n                data-testid=\"input-new-answer\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleCreateCard}\n                disabled={createCardMutation.isPending}\n                data-testid=\"button-save-card\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {createCardMutation.isPending ? 'Mentés...' : 'Kártya mentése'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowNewCardForm(false);\n                  setNewQuestion('');\n                  setNewAnswer('');\n                }}\n                data-testid=\"button-cancel-card\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Mégse\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Cards List */}\n      {cardsLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-2\"></div>\n            <p className=\"text-muted-foreground text-sm\">Kártyák betöltése...</p>\n          </div>\n        </div>\n      ) : cards.length === 0 ? (\n        <Card className=\"text-center py-12\" data-testid=\"empty-cards-state\">\n          <CardContent>\n            <div className=\"text-6xl mb-4\">📋</div>\n            <h3 className=\"text-lg font-semibold mb-2\">Még nincsenek kártyák</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Add hozzá az első kártyádat ehhez a paklihoz!\n            </p>\n            <Button\n              onClick={() => setShowNewCardForm(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-add-first-card\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Első kártya hozzáadása\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-3\">\n          {cards.map((card, index) => (\n            <Card key={card.id} className=\"hover:shadow-md transition-shadow\">\n              {editingCard?.id === card.id ? (\n                <CardContent className=\"p-4\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Kérdés</label>\n                      <Textarea\n                        value={editQuestion}\n                        onChange={(e) => setEditQuestion(e.target.value)}\n                        data-testid={`input-edit-question-${card.id}`}\n                        rows={2}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium mb-2\">Válasz</label>\n                      <Textarea\n                        value={editAnswer}\n                        onChange={(e) => setEditAnswer(e.target.value)}\n                        data-testid={`input-edit-answer-${card.id}`}\n                        rows={3}\n                      />\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        onClick={handleUpdateCard}\n                        disabled={updateCardMutation.isPending}\n                        size=\"sm\"\n                        data-testid={`button-save-edit-${card.id}`}\n                      >\n                        <Save className=\"w-4 h-4 mr-1\" />\n                        Mentés\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={cancelEdit}\n                        size=\"sm\"\n                        data-testid={`button-cancel-edit-${card.id}`}\n                      >\n                        <X className=\"w-4 h-4 mr-1\" />\n                        Mégse\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              ) : (\n                <CardContent className=\"p-4\">\n                  <div className=\"flex justify-between items-start gap-4\">\n                    <div className=\"flex-1 space-y-3\">\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            #{index + 1}\n                          </Badge>\n                          <span className=\"text-xs text-muted-foreground\">Kérdés</span>\n                        </div>\n                        <p className=\"text-sm font-medium\" data-testid={`card-question-${card.id}`}>\n                          {card.question}\n                        </p>\n                      </div>\n                      <Separator />\n                      <div>\n                        <div className=\"text-xs text-muted-foreground mb-1\">Válasz</div>\n                        <p className=\"text-sm\" data-testid={`card-answer-${card.id}`}>\n                          {card.answer}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEditCard(card)}\n                        data-testid={`button-edit-card-${card.id}`}\n                      >\n                        <Edit3 className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDeleteCard(card.id)}\n                        className=\"text-destructive hover:text-destructive\"\n                        data-testid={`button-delete-card-${card.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15287},"client/src/pages/StudyMode.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRoute, Link } from 'wouter';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { ArrowLeft, ArrowRight, RotateCcw, Clock, CheckCircle, XCircle, Home } from 'lucide-react';\nimport { calculateNextReview } from '@/utils/spaced-repetition';\nimport useStore from '@/store/useStore';\nimport type { Deck, Flashcard } from '@shared/schema';\n\ninterface StudyStats {\n  correct: number;\n  incorrect: number;\n  total: number;\n  currentIndex: number;\n}\n\nexport default function StudyMode() {\n  const [, params] = useRoute('/study/:deckId');\n  const deckId = params?.deckId;\n  \n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showAnswer, setShowAnswer] = useState(false);\n  const [studyStats, setStudyStats] = useState<StudyStats>({\n    correct: 0,\n    incorrect: 0,\n    total: 0,\n    currentIndex: 0,\n  });\n  const [sessionComplete, setSessionComplete] = useState(false);\n  const [sessionCards, setSessionCards] = useState<Flashcard[]>([]);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { cardDifficulty } = useStore();\n\n  // Query for deck details\n  const { data: deck } = useQuery({\n    queryKey: [`/api/decks/${deckId}`],\n    enabled: !!deckId,\n    refetchOnWindowFocus: false,\n  }) as { data: Deck | undefined };\n\n  // Query for cards that need review\n  const { data: reviewCards = [], isLoading } = useQuery({\n    queryKey: [`/api/decks/${deckId}/review`],\n    enabled: !!deckId,\n    refetchOnWindowFocus: false,\n  }) as { data: Flashcard[]; isLoading: boolean };\n\n  // Update flashcard mutation\n  const updateCardMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await fetch(`/api/flashcards/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to update card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/cards`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/review`] });\n    }\n  });\n\n  // Create study session mutation\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/study-sessions', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' },\n      });\n      if (!response.ok) throw new Error('Failed to create session');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/study-sessions'] });\n    }\n  });\n\n  // Initialize session when review cards are loaded\n  useEffect(() => {\n    if (reviewCards.length > 0 && sessionCards.length === 0) {\n      // Limit to 20 cards per session for better UX\n      const limitedCards = reviewCards.slice(0, 20);\n      setSessionCards(limitedCards);\n      setStudyStats({\n        correct: 0,\n        incorrect: 0,\n        total: limitedCards.length,\n        currentIndex: 0,\n      });\n    }\n  }, [reviewCards, sessionCards.length]);\n\n  // Keyboard event handler\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      if (sessionComplete || !showAnswer) return;\n      \n      if (event.key === 'ArrowLeft') {\n        event.preventDefault();\n        handleCardResponse(false);\n      } else if (event.key === 'ArrowRight') {\n        event.preventDefault();\n        handleCardResponse(true);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [showAnswer, sessionComplete]);\n\n  const currentCard = sessionCards[currentCardIndex];\n  const progress = sessionCards.length > 0 ? ((currentCardIndex) / sessionCards.length) * 100 : 0;\n\n  const handleCardReveal = () => {\n    setShowAnswer(true);\n  };\n\n  const handleCardResponse = async (known: boolean) => {\n    if (!currentCard || !showAnswer) return;\n\n    // Calculate next review using spaced repetition with global difficulty setting\n    const difficultyMultiplier = {\n      'easy': 1.5,    // Easier intervals (longer gaps)\n      'medium': 1.0,  // Standard intervals\n      'hard': 0.7     // Harder intervals (shorter gaps)\n    }[cardDifficulty] || 1.0;\n\n    const review = {\n      correct: known,\n      difficulty: currentCard.difficulty || 1,\n    };\n\n    const previousInterval = currentCard.lastReviewed \n      ? Math.ceil((Date.now() - new Date(currentCard.lastReviewed).getTime()) / (1000 * 60 * 60 * 24))\n      : 1;\n\n    const { nextInterval, nextReviewDate, newDifficulty } = calculateNextReview(review, previousInterval, difficultyMultiplier);\n\n    // Update card in database\n    await updateCardMutation.mutateAsync({\n      id: currentCard.id,\n      data: {\n        difficulty: newDifficulty,\n        nextReview: nextReviewDate,\n        lastReviewed: new Date(),\n        correctCount: known ? (currentCard.correctCount || 0) + 1 : currentCard.correctCount,\n        incorrectCount: known ? currentCard.incorrectCount : (currentCard.incorrectCount || 0) + 1,\n      }\n    });\n\n    // Update session stats\n    const newStats = {\n      ...studyStats,\n      correct: studyStats.correct + (known ? 1 : 0),\n      incorrect: studyStats.incorrect + (known ? 0 : 1),\n      currentIndex: currentCardIndex,\n    };\n    setStudyStats(newStats);\n\n    // Move to next card or finish session\n    if (currentCardIndex < sessionCards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setShowAnswer(false);\n    } else {\n      // Session complete\n      setSessionComplete(true);\n      \n      // Calculate XP (simplified: 5 points per correct card, 1 per incorrect)\n      const xp = newStats.correct * 5 + newStats.incorrect * 1;\n      \n      // Save study session\n      await createSessionMutation.mutateAsync({\n        type: 'cards',\n        duration: 0, // We don't track duration for card-only sessions currently\n        xpEarned: xp,\n        cardsStudied: sessionCards.length,\n        correctCards: newStats.correct,\n        focusInterrupted: false,\n      });\n\n      toast({\n        title: \"Tanulási munkamenet befejezve!\",\n        description: `${newStats.correct} helyes, ${newStats.incorrect} helytelen válasz. +${xp} XP szerzett!`,\n      });\n    }\n  };\n\n  const resetSession = () => {\n    setCurrentCardIndex(0);\n    setShowAnswer(false);\n    setStudyStats({ correct: 0, incorrect: 0, total: 0, currentIndex: 0 });\n    setSessionComplete(false);\n    setSessionCards([]);\n    queryClient.invalidateQueries({ queryKey: [`/api/decks/${deckId}/review`] });\n  };\n\n  // Touch event handlers for swipe gestures\n  const [touchStart, setTouchStart] = useState<{ x: number; y: number } | null>(null);\n  const [touchEnd, setTouchEnd] = useState<{ x: number; y: number } | null>(null);\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    setTouchEnd(null);\n    setTouchStart({\n      x: e.targetTouches[0].clientX,\n      y: e.targetTouches[0].clientY,\n    });\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    setTouchEnd({\n      x: e.targetTouches[0].clientX,\n      y: e.targetTouches[0].clientY,\n    });\n  };\n\n  const handleTouchEnd = () => {\n    if (!touchStart || !touchEnd || !showAnswer) return;\n    \n    const distanceX = touchStart.x - touchEnd.x;\n    const distanceY = touchStart.y - touchEnd.y;\n    const isHorizontalSwipe = Math.abs(distanceX) > Math.abs(distanceY);\n    const minSwipeDistance = 50;\n\n    if (isHorizontalSwipe && Math.abs(distanceX) > minSwipeDistance) {\n      if (distanceX > 0) {\n        // Swiped left = \"Nem tudom\" (Don't know)\n        handleCardResponse(false);\n      } else {\n        // Swiped right = \"Tudom\" (I know)\n        handleCardResponse(true);\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Kártyák betöltése...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!deck) {\n    return (\n      <div className=\"text-center py-12\">\n        <h1 className=\"text-2xl font-bold mb-4\">Pakli nem található</h1>\n        <Link href=\"/cards\">\n          <Button variant=\"outline\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Vissza a paklikhoz\n          </Button>\n        </Link>\n      </div>\n    );\n  }\n\n  if (reviewCards.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">{deck.name}</h1>\n          <p className=\"text-muted-foreground\">Nincs tanulnivaló kártya</p>\n        </div>\n        \n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-6xl mb-4\">🎉</div>\n            <h3 className=\"text-lg font-semibold mb-2\">Minden kártya naprakész!</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Jelenleg nincs olyan kártya, amit gyakorolnod kellene. Térj vissza később!\n            </p>\n            <Link href=\"/cards\">\n              <Button data-testid=\"button-back-to-decks\">\n                <Home className=\"w-4 h-4 mr-2\" />\n                Vissza a paklikhoz\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (sessionComplete) {\n    return (\n      <div className=\"text-center\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">{deck.name}</h1>\n          <p className=\"text-muted-foreground\">Tanulási munkamenet befejezve</p>\n        </div>\n\n        <Card className=\"max-w-md mx-auto\" data-testid=\"session-complete\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-6xl mb-4\">✨</div>\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">\n              Szuper munka!\n            </h3>\n            <div className=\"grid grid-cols-2 gap-4 text-center mb-6\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-600 flex items-center justify-center gap-1\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                  <span data-testid=\"correct-count\">{studyStats.correct}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Helyes</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-destructive flex items-center justify-center gap-1\">\n                  <XCircle className=\"w-6 h-6\" />\n                  <span data-testid=\"incorrect-count\">{studyStats.incorrect}</span>\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Helytelen</div>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={resetSession} \n                className=\"flex-1\"\n                data-testid=\"button-new-session\"\n              >\n                <RotateCcw className=\"w-4 h-4 mr-2\" />\n                Új munkamenet\n              </Button>\n              <Link href=\"/cards\" className=\"flex-1\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Paklik\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-6 text-center\">\n        <Link href=\"/cards\" className=\"inline-block mb-4\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Vissza\n          </Button>\n        </Link>\n        <h1 className=\"text-2xl font-bold text-foreground\">{deck.name}</h1>\n        <p className=\"text-muted-foreground\">\n          {showAnswer \n            ? \"Swipe jobbra ha tudod, balra ha nem tudod, vagy használd a ←/→ gombokat\"\n            : \"Koppints a kártyára a válasz megtekintéséhez\"\n          }\n        </p>\n      </div>\n\n      {/* Progress */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <span className=\"text-sm text-muted-foreground\">Haladás</span>\n          <div className=\"flex items-center gap-4\">\n            <Badge variant=\"outline\">\n              <span data-testid=\"progress-text\">\n                {currentCardIndex + 1}/{sessionCards.length}\n              </span>\n            </Badge>\n            <div className=\"flex gap-2 text-xs\">\n              <span className=\"text-green-600\">✓ {studyStats.correct}</span>\n              <span className=\"text-destructive\">✗ {studyStats.incorrect}</span>\n            </div>\n          </div>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      {/* Card Display */}\n      <div \n        className=\"relative mb-8 cursor-pointer select-none\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onClick={showAnswer ? undefined : handleCardReveal}\n        data-testid=\"study-card\"\n      >\n        <Card className=\"min-h-[300px] hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-8 h-full flex items-center justify-center\">\n            <div className=\"text-center space-y-4 w-full\">\n              <div className=\"text-lg font-semibold text-card-foreground\">\n                {currentCard?.question}\n              </div>\n              \n              {showAnswer ? (\n                <div className=\"pt-4 border-t border-border\">\n                  <div className=\"text-muted-foreground mb-2 text-sm\">Válasz:</div>\n                  <div className=\"text-lg text-card-foreground\">\n                    {currentCard?.answer}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"pt-4\">\n                  <div className=\"text-muted-foreground text-sm\">\n                    Koppints ide a válasz megtekintéséhez\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next card preview */}\n        {currentCardIndex < sessionCards.length - 1 && (\n          <Card className=\"absolute inset-0 transform scale-95 -translate-y-2 opacity-30 pointer-events-none\" style={{ zIndex: -1 }}>\n            <CardContent className=\"p-8 h-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground\">Következő kártya</div>\n                <div className=\"text-base font-medium text-card-foreground mt-2\">\n                  {sessionCards[currentCardIndex + 1]?.question}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Action Buttons - Only show when answer is revealed */}\n      {showAnswer && (\n        <>\n          {/* Swipe Instructions */}\n          <div className=\"flex justify-between items-center mb-6 text-sm\">\n            <div className=\"flex items-center text-destructive\">\n              <ArrowLeft className=\"w-5 h-5 mr-2\" />\n              <span>Swipe balra / ← gomb</span>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span>Swipe jobbra / → gomb</span>\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-4\">\n            <Button\n              onClick={() => handleCardResponse(false)}\n              className=\"flex-1 bg-destructive text-destructive-foreground hover:bg-destructive/90 h-14\"\n              data-testid=\"button-dont-know\"\n            >\n              <XCircle className=\"w-5 h-5 mr-2\" />\n              Nem tudom\n            </Button>\n            <Button\n              onClick={() => handleCardResponse(true)}\n              className=\"flex-1 bg-green-600 text-white hover:bg-green-700 h-14\"\n              data-testid=\"button-know\"\n            >\n              <CheckCircle className=\"w-5 h-5 mr-2\" />\n              Tudom\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":16791},"replit.md":{"content":"# Overview\n\nZAP is a modern Hungarian learning platform that combines flashcard-based study, AI-powered content processing, focus modes, and progress tracking. The application is designed as a full-stack web application with a React frontend and Express backend, targeted specifically at Hungarian students with all UI text in Hungarian.\n\nThe platform provides core features including manual and AI-generated flashcard creation, spaced repetition algorithms, Pomodoro-style focus sessions with XP rewards, AI chat assistance, and comprehensive progress tracking. The application emphasizes a clean, minimalist design with customizable themes and accent colors.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **Routing**: Client-side routing using Wouter for lightweight navigation\n- **State Management**: Zustand with persistence for global application state\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **UI Components**: Radix UI primitives for accessible, unstyled components with custom styling\n- **Theme System**: Light/dark mode toggle with customizable accent colors and CSS custom properties\n\n## Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with consistent JSON responses\n- **Storage Strategy**: Abstracted storage interface allowing easy migration from in-memory to database\n- **Current Storage**: In-memory storage for development, designed for easy PostgreSQL migration\n- **Build Process**: ESBuild for server bundling, separate from Vite client build\n\n## Data Architecture\n- **Schema Definition**: Drizzle ORM with shared schema types between client and server\n- **Database Ready**: PostgreSQL schema defined but currently using memory storage\n- **Type Safety**: Full TypeScript coverage with Zod validation for API boundaries\n- **Data Models**: Users, Materials, Decks, Flashcards, Study Sessions, and Settings entities\n\n## Authentication and Authorization\n- **Current State**: Basic demo user system for development\n- **Prepared Infrastructure**: User schema and session handling ready for implementation\n- **Session Management**: Cookie-based sessions with connect-pg-simple for PostgreSQL\n\n## External Dependencies\n\n### Core Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **Tailwind CSS**: Utility-first CSS framework\n- **Drizzle ORM**: Type-safe database toolkit for PostgreSQL\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form handling and validation\n- **TanStack Query**: Data fetching and caching for API calls\n\n### State Management and Utilities\n- **Zustand**: Lightweight state management with persistence\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition\n- **CLSX**: Conditional className utility\n\n### Database and Storage\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n- **Drizzle Kit**: Database migrations and schema management\n- **Connect-pg-simple**: PostgreSQL session store for Express\n\n### AI Integration\n- **OpenAI API**: GPT-5 integration for content summarization, flashcard generation, and chat\n- **Configurable Keys**: User-provided API keys stored in settings, never hardcoded\n- **Service Abstraction**: Centralized OpenAI service for consistent API usage\n\n### Development and Deployment\n- **@replit/vite-plugins**: Replit-specific development tools and error handling\n- **ESBuild**: Fast server-side bundling for production builds\n- **PostCSS**: CSS processing with Tailwind integration\n\n### Specialized Features\n- **Spaced Repetition**: Custom SM-2 based algorithm for flashcard scheduling\n- **Focus Detection**: Browser API integration for Pomodoro session monitoring\n- **File Processing**: Prepared infrastructure for PDF and image OCR (placeholder functions)\n- **Hungarian Localization**: All UI text and user-facing content in Hungarian language","size_bytes":4322},"server/database-storage.ts":{"content":"import { type User, type InsertUser, type Material, type InsertMaterial, type Deck, type InsertDeck, type Flashcard, type InsertFlashcard, type StudySession, type InsertStudySession, type Settings, type InsertSettings } from \"@shared/schema\";\nimport { users, materials, decks, flashcards, studySessions, settings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, lte } from \"drizzle-orm\";\nimport { IStorage } from \"./storage\";\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [updatedUser] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return updatedUser || undefined;\n  }\n\n  // Materials\n  async getMaterialsByUserId(userId: string): Promise<Material[]> {\n    return await db.select().from(materials).where(eq(materials.userId, userId));\n  }\n\n  async getMaterial(id: string): Promise<Material | undefined> {\n    const [material] = await db.select().from(materials).where(eq(materials.id, id));\n    return material || undefined;\n  }\n\n  async createMaterial(material: InsertMaterial): Promise<Material> {\n    const [newMaterial] = await db.insert(materials).values(material).returning();\n    return newMaterial;\n  }\n\n  async updateMaterial(id: string, updates: Partial<Material>): Promise<Material | undefined> {\n    const [updatedMaterial] = await db.update(materials).set(updates).where(eq(materials.id, id)).returning();\n    return updatedMaterial || undefined;\n  }\n\n  async deleteMaterial(id: string): Promise<boolean> {\n    const result = await db.delete(materials).where(eq(materials.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Decks\n  async getDecksByUserId(userId: string): Promise<Deck[]> {\n    return await db.select().from(decks).where(eq(decks.userId, userId));\n  }\n\n  async getDeck(id: string): Promise<Deck | undefined> {\n    const [deck] = await db.select().from(decks).where(eq(decks.id, id));\n    return deck || undefined;\n  }\n\n  async createDeck(deck: InsertDeck): Promise<Deck> {\n    const [newDeck] = await db.insert(decks).values(deck).returning();\n    return newDeck;\n  }\n\n  async updateDeck(id: string, updates: Partial<Deck>): Promise<Deck | undefined> {\n    const [updatedDeck] = await db.update(decks).set(updates).where(eq(decks.id, id)).returning();\n    return updatedDeck || undefined;\n  }\n\n  async deleteDeck(id: string): Promise<boolean> {\n    const result = await db.delete(decks).where(eq(decks.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Flashcards\n  async getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]> {\n    return await db.select().from(flashcards).where(eq(flashcards.deckId, deckId));\n  }\n\n  async getFlashcardsByMaterialId(materialId: string): Promise<Flashcard[]> {\n    return await db.select().from(flashcards).where(eq(flashcards.materialId, materialId));\n  }\n\n  async getFlashcardsByUserId(userId: string): Promise<Flashcard[]> {\n    return await db.select().from(flashcards).where(eq(flashcards.userId, userId));\n  }\n\n  async getFlashcardsForReview(userId: string): Promise<Flashcard[]> {\n    const now = new Date();\n    return await db.select().from(flashcards).where(\n      and(\n        eq(flashcards.userId, userId),\n        lte(flashcards.nextReview, now)\n      )\n    );\n  }\n\n  async getFlashcardsForReviewByDeck(deckId: string): Promise<Flashcard[]> {\n    const now = new Date();\n    return await db.select().from(flashcards).where(\n      and(\n        eq(flashcards.deckId, deckId),\n        lte(flashcards.nextReview, now)\n      )\n    );\n  }\n\n  async getFlashcard(id: string): Promise<Flashcard | undefined> {\n    const [flashcard] = await db.select().from(flashcards).where(eq(flashcards.id, id));\n    return flashcard || undefined;\n  }\n\n  async createFlashcard(flashcard: InsertFlashcard): Promise<Flashcard> {\n    const [newFlashcard] = await db.insert(flashcards).values(flashcard).returning();\n    return newFlashcard;\n  }\n\n  async updateFlashcard(id: string, updates: Partial<Flashcard>): Promise<Flashcard | undefined> {\n    const [updatedFlashcard] = await db.update(flashcards).set(updates).where(eq(flashcards.id, id)).returning();\n    return updatedFlashcard || undefined;\n  }\n\n  async deleteFlashcard(id: string): Promise<boolean> {\n    const result = await db.delete(flashcards).where(eq(flashcards.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Study Sessions\n  async getStudySessionsByUserId(userId: string): Promise<StudySession[]> {\n    return await db.select().from(studySessions).where(eq(studySessions.userId, userId));\n  }\n\n  async createStudySession(session: InsertStudySession): Promise<StudySession> {\n    const [newSession] = await db.insert(studySessions).values(session).returning();\n    return newSession;\n  }\n\n  // Settings\n  async getSettings(userId: string): Promise<Settings | undefined> {\n    const [userSettings] = await db.select().from(settings).where(eq(settings.userId, userId));\n    return userSettings || undefined;\n  }\n\n  async createOrUpdateSettings(settingsData: InsertSettings): Promise<Settings> {\n    // Try to find existing settings\n    const existing = await this.getSettings(settingsData.userId!);\n    \n    if (existing) {\n      // Update existing settings\n      const [updatedSettings] = await db\n        .update(settings)\n        .set(settingsData)\n        .where(eq(settings.userId, settingsData.userId!))\n        .returning();\n      return updatedSettings;\n    } else {\n      // Create new settings\n      const [newSettings] = await db.insert(settings).values(settingsData).returning();\n      return newSettings;\n    }\n  }\n}","size_bytes":6334},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/storage-backup.ts":{"content":"import { type User, type InsertUser, type Material, type InsertMaterial, type Deck, type InsertDeck, type Flashcard, type InsertFlashcard, type StudySession, type InsertStudySession, type Settings, type InsertSettings } from \"@shared/schema\";\nimport { users, materials, decks, flashcards, studySessions, settings } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, lte } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Materials\n  getMaterialsByUserId(userId: string): Promise<Material[]>;\n  getMaterial(id: string): Promise<Material | undefined>;\n  createMaterial(material: InsertMaterial): Promise<Material>;\n  updateMaterial(id: string, updates: Partial<Material>): Promise<Material | undefined>;\n  deleteMaterial(id: string): Promise<boolean>;\n\n  // Decks\n  getDecksByUserId(userId: string): Promise<Deck[]>;\n  getDeck(id: string): Promise<Deck | undefined>;\n  createDeck(deck: InsertDeck): Promise<Deck>;\n  updateDeck(id: string, updates: Partial<Deck>): Promise<Deck | undefined>;\n  deleteDeck(id: string): Promise<boolean>;\n\n  // Flashcards\n  getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]>;\n  getFlashcardsByMaterialId(materialId: string): Promise<Flashcard[]>;\n  getFlashcardsByUserId(userId: string): Promise<Flashcard[]>;\n  getFlashcardsForReview(userId: string): Promise<Flashcard[]>;\n  getFlashcardsForReviewByDeck(deckId: string): Promise<Flashcard[]>;\n  getFlashcard(id: string): Promise<Flashcard | undefined>;\n  createFlashcard(flashcard: InsertFlashcard): Promise<Flashcard>;\n  updateFlashcard(id: string, updates: Partial<Flashcard>): Promise<Flashcard | undefined>;\n  deleteFlashcard(id: string): Promise<boolean>;\n\n  // Study Sessions\n  getStudySessionsByUserId(userId: string): Promise<StudySession[]>;\n  createStudySession(session: InsertStudySession): Promise<StudySession>;\n\n  // Settings\n  getSettings(userId: string): Promise<Settings | undefined>;\n  createOrUpdateSettings(settings: InsertSettings): Promise<Settings>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private materials: Map<string, Material> = new Map();\n  private decks: Map<string, Deck> = new Map();\n  private flashcards: Map<string, Flashcard> = new Map();\n  private studySessions: Map<string, StudySession> = new Map();\n  private settings: Map<string, Settings> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Create demo user with fixed \"demo\" ID for consistency\n    const userId = \"demo\";\n    const user: User = {\n      id: userId,\n      username: \"demo\",\n      email: \"demo@example.com\",\n      password: \"demo\",\n      xp: 1432,\n      level: 5,\n      currentAnimal: \"Villám Nyúl\",\n      createdAt: new Date(),\n    };\n    this.users.set(userId, user);\n\n    // Create demo material\n    const materialId = randomUUID();\n    const material: Material = {\n      id: materialId,\n      userId,\n      title: \"Magyar történelem\",\n      content: \"Az Árpád-házi királyok időszaka (896-1301) Magyarország történelmének alapító korszaka volt. István I., az első magyar király 1000-ben vagy 1001-ben koronáztatta meg magát. A kereszténység felvétele és az európai államközösséghez való csatlakozás megalapozta a magyar államiságot.\",\n      summary: \"Az Árpád-ház Magyarország első királyi dinasztiája volt, amely megalapozta a keresztény magyar államot.\",\n      type: \"text\",\n      createdAt: new Date(),\n    };\n    this.materials.set(materialId, material);\n\n    // Create demo deck\n    const deckId = randomUUID();\n    const deck: Deck = {\n      id: deckId,\n      userId,\n      name: \"Magyar történelem\",\n      description: \"Árpád-házi királyok és a korai magyar államiság\",\n      createdAt: new Date(),\n      lastStudied: null,\n    };\n    this.decks.set(deckId, deck);\n\n    // Create demo flashcards\n    const flashcardData = [\n      { question: \"Mikor kezdődött az Árpád-ház uralma Magyarországon?\", answer: \"896-ban, amikor Árpád vezér és a magyarok betelepedtek a Kárpát-medencébe.\" },\n      { question: \"Ki volt az első magyar király?\", answer: \"István I., akit 1000. december 25-én vagy 1001. január 1-jén koronáztak meg.\" },\n      { question: \"Mikor ért véget az Árpád-ház uralma?\", answer: \"1301-ben III. András halálával.\" },\n      { question: \"Mi volt István király legnagyobb eredménye?\", answer: \"A kereszténység felvétele és a magyar államiság megalapozása.\" },\n      { question: \"Hogyan csatlakozott Magyarország Európához?\", answer: \"A kereszténység felvételével és az európai államközösséghez való csatlakozással.\" },\n      { question: \"Milyen időszakot ölelt fel az Árpád-ház uralma?\", answer: \"896-tól 1301-ig, összesen 405 évet.\" },\n    ];\n\n    flashcardData.forEach((card, index) => {\n      const flashcardId = randomUUID();\n      const flashcard: Flashcard = {\n        id: flashcardId,\n        deckId,\n        materialId,\n        userId,\n        question: card.question,\n        answer: card.answer,\n        difficulty: 1,\n        nextReview: new Date(),\n        lastReviewed: null,\n        correctCount: Math.floor(Math.random() * 5),\n        incorrectCount: Math.floor(Math.random() * 3),\n        createdAt: new Date(),\n      };\n      this.flashcards.set(flashcardId, flashcard);\n    });\n\n    // Create demo settings\n    const settingsId = randomUUID();\n    const userSettings: Settings = {\n      id: settingsId,\n      userId,\n      openaiApiKey: null,\n      theme: \"light\",\n      accentColor: \"blue\",\n      focusAlerts: true,\n      dailyReminders: false,\n      cardDifficulty: \"medium\",\n    };\n    this.settings.set(userId, userSettings);\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id, createdAt: new Date() };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updated = { ...user, ...updates };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Materials\n  async getMaterialsByUserId(userId: string): Promise<Material[]> {\n    return Array.from(this.materials.values()).filter(material => material.userId === userId);\n  }\n\n  async getMaterial(id: string): Promise<Material | undefined> {\n    return this.materials.get(id);\n  }\n\n  async createMaterial(insertMaterial: InsertMaterial): Promise<Material> {\n    const id = randomUUID();\n    const material: Material = { ...insertMaterial, id, createdAt: new Date() };\n    this.materials.set(id, material);\n    return material;\n  }\n\n  async updateMaterial(id: string, updates: Partial<Material>): Promise<Material | undefined> {\n    const material = this.materials.get(id);\n    if (!material) return undefined;\n    const updated = { ...material, ...updates };\n    this.materials.set(id, updated);\n    return updated;\n  }\n\n  async deleteMaterial(id: string): Promise<boolean> {\n    return this.materials.delete(id);\n  }\n\n  // Decks\n  async getDecksByUserId(userId: string): Promise<Deck[]> {\n    return Array.from(this.decks.values()).filter(deck => deck.userId === userId);\n  }\n\n  async getDeck(id: string): Promise<Deck | undefined> {\n    return this.decks.get(id);\n  }\n\n  async createDeck(insertDeck: InsertDeck): Promise<Deck> {\n    const id = randomUUID();\n    const deck: Deck = { ...insertDeck, id, createdAt: new Date(), lastStudied: null };\n    this.decks.set(id, deck);\n    return deck;\n  }\n\n  async updateDeck(id: string, updates: Partial<Deck>): Promise<Deck | undefined> {\n    const deck = this.decks.get(id);\n    if (!deck) return undefined;\n    const updated = { ...deck, ...updates };\n    this.decks.set(id, updated);\n    return updated;\n  }\n\n  async deleteDeck(id: string): Promise<boolean> {\n    return this.decks.delete(id);\n  }\n\n  // Flashcards\n  async getFlashcardsByDeckId(deckId: string): Promise<Flashcard[]> {\n    return Array.from(this.flashcards.values()).filter(card => card.deckId === deckId);\n  }\n\n  async getFlashcardsByMaterialId(materialId: string): Promise<Flashcard[]> {\n    return Array.from(this.flashcards.values()).filter(card => card.materialId === materialId);\n  }\n\n  async getFlashcardsByUserId(userId: string): Promise<Flashcard[]> {\n    return Array.from(this.flashcards.values()).filter(card => card.userId === userId);\n  }\n\n  async getFlashcardsForReview(userId: string): Promise<Flashcard[]> {\n    const now = new Date();\n    return Array.from(this.flashcards.values())\n      .filter(card => card.userId === userId && card.nextReview && card.nextReview <= now)\n      .sort((a, b) => (a.nextReview?.getTime() || 0) - (b.nextReview?.getTime() || 0));\n  }\n\n  async getFlashcardsForReviewByDeck(deckId: string): Promise<Flashcard[]> {\n    const now = new Date();\n    return Array.from(this.flashcards.values())\n      .filter(card => card.deckId === deckId && card.nextReview && card.nextReview <= now)\n      .sort((a, b) => (a.nextReview?.getTime() || 0) - (b.nextReview?.getTime() || 0));\n  }\n\n  async getFlashcard(id: string): Promise<Flashcard | undefined> {\n    return this.flashcards.get(id);\n  }\n\n  async createFlashcard(insertFlashcard: InsertFlashcard): Promise<Flashcard> {\n    const id = randomUUID();\n    const flashcard: Flashcard = { \n      ...insertFlashcard, \n      id, \n      createdAt: new Date(),\n      lastReviewed: null,\n    };\n    this.flashcards.set(id, flashcard);\n    return flashcard;\n  }\n\n  async updateFlashcard(id: string, updates: Partial<Flashcard>): Promise<Flashcard | undefined> {\n    const flashcard = this.flashcards.get(id);\n    if (!flashcard) return undefined;\n    const updated = { ...flashcard, ...updates };\n    this.flashcards.set(id, updated);\n    return updated;\n  }\n\n  async deleteFlashcard(id: string): Promise<boolean> {\n    return this.flashcards.delete(id);\n  }\n\n  // Study Sessions\n  async getStudySessionsByUserId(userId: string): Promise<StudySession[]> {\n    return Array.from(this.studySessions.values())\n      .filter(session => session.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createStudySession(insertSession: InsertStudySession): Promise<StudySession> {\n    const id = randomUUID();\n    const session: StudySession = { ...insertSession, id, createdAt: new Date() };\n    this.studySessions.set(id, session);\n    return session;\n  }\n\n  // Settings\n  async getSettings(userId: string): Promise<Settings | undefined> {\n    return this.settings.get(userId);\n  }\n\n  async createOrUpdateSettings(insertSettings: InsertSettings): Promise<Settings> {\n    const existing = this.settings.get(insertSettings.userId!);\n    if (existing) {\n      const updated = { ...existing, ...insertSettings };\n      this.settings.set(insertSettings.userId!, updated);\n      return updated;\n    } else {\n      const id = randomUUID();\n      const settings: Settings = { ...insertSettings, id };\n      this.settings.set(insertSettings.userId!, settings);\n      return settings;\n    }\n  }\n}\n\nimport { DatabaseStorage } from './database-storage';\n\nexport const storage = new DatabaseStorage();\n\n// Seed database with demo data if needed\nexport async function seedDatabase() {\n  try {\n    // Check if demo user already exists\n    const demoUser = await storage.getUserByEmail('demo@example.com');\n    if (demoUser) {\n      console.log('Demo data already exists');\n      return;\n    }\n\n    console.log('Seeding database with demo data...');\n    \n    // Create demo user\n    const user = await storage.createUser({\n      username: 'demo',\n      email: 'demo@example.com',\n      password: 'demo',\n      xp: 1432,\n      level: 5,\n      currentAnimal: 'Delfin',\n    });\n\n    // Create demo material\n    const material = await storage.createMaterial({\n      userId: user.id,\n      title: 'Magyar történelem',\n      content: 'Az Árpád-házi királyok időszaka (896-1301) Magyarország történelmének alapító korszaka volt. István I., az első magyar király 1000-ben vagy 1001-ben koronáztatta meg magát. A kereszténység felvétele és az európai államközösséghez való csatlakozás megalapozta a magyar államiságot.',\n      summary: 'Az Árpád-ház Magyarország első királyi dinasztiája volt, amely megalapozta a keresztény magyar államot.',\n      type: 'text',\n    });\n\n    // Create demo deck\n    const deck = await storage.createDeck({\n      userId: user.id,\n      name: 'Magyar történelem',\n      description: 'Árpád-házi királyok és a korai magyar államiság',\n    });\n\n    // Create demo flashcards\n    const flashcardData = [\n      { question: 'Mikor kezdődött az Árpád-ház uralma Magyarországon?', answer: '896-ban, amikor Árpád vezér és a magyarok betelepedtek a Kárpát-medencébe.' },\n      { question: 'Ki volt az első magyar király?', answer: 'István I., akit 1000. december 25-én vagy 1001. január 1-jén koronáztak meg.' },\n      { question: 'Mikor ért véget az Árpád-ház uralma?', answer: '1301-ben III. András halálával.' },\n      { question: 'Mi volt István király legnagyobb eredménye?', answer: 'A kereszténység felvétele és a magyar államiság megalapozása.' },\n      { question: 'Hogyan csatlakozott Magyarország Európához?', answer: 'A kereszténység felvételével és az európai államközösséghez való csatlakozással.' },\n    ];\n\n    for (const cardData of flashcardData) {\n      await storage.createFlashcard({\n        userId: user.id,\n        deckId: deck.id,\n        materialId: material.id,\n        question: cardData.question,\n        answer: cardData.answer,\n        difficulty: 1,\n        nextReview: new Date(),\n      });\n    }\n\n    // Create demo settings\n    await storage.createOrUpdateSettings({\n      userId: user.id,\n      openaiApiKey: null,\n      theme: 'light',\n      accentColor: 'blue',\n      focusAlerts: true,\n      dailyReminders: false,\n      cardDifficulty: 'medium',\n    });\n\n    // Create some demo study sessions\n    const sessions = [\n      {\n        userId: user.id,\n        type: 'cards' as const,\n        duration: 15,\n        xpEarned: 45,\n        cardsStudied: 5,\n        correctCards: 4,\n        focusInterrupted: false,\n      },\n      {\n        userId: user.id,\n        type: 'focus' as const,\n        duration: 25,\n        xpEarned: 50,\n        cardsStudied: 0,\n        correctCards: 0,\n        focusInterrupted: false,\n      },\n    ];\n\n    for (const sessionData of sessions) {\n      await storage.createStudySession(sessionData);\n    }\n\n    console.log('Database seeded successfully!');\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n}\n","size_bytes":15466}},"version":1}